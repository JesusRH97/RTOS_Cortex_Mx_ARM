
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001284  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800142c  0800142c  0001142c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014d8  080014d8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080014d8  080014d8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014d8  080014d8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014d8  080014d8  000114d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014dc  080014dc  000114dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080014e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000068  08001548  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08001548  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e3e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000055b  00000000  00000000  00020ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00021438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b8  00000000  00000000  00021638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002daf  00000000  00000000  000217f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b1e  00000000  00000000  0002459f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009aac  00000000  00000000  000260bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002fb69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d68  00000000  00000000  0002fbbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000068 	.word	0x20000068
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001414 	.word	0x08001414

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	08001414 	.word	0x08001414

080001e8 <LED_initAll>:
#include <stdint.h>
#include "led.h"

void LED_initAll(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 80001ee:	4b19      	ldr	r3, [pc, #100]	; (8000254 <LED_initAll+0x6c>)
 80001f0:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 80001f2:	4b19      	ldr	r3, [pc, #100]	; (8000258 <LED_initAll+0x70>)
 80001f4:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f043 0208 	orr.w	r2, r3, #8
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
	/* Configure LED_GREEN */
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

	LED_setOff(LED_GREEN);
 8000232:	200c      	movs	r0, #12
 8000234:	f000 f82a 	bl	800028c <LED_setOff>
	LED_setOff(LED_ORANGE);
 8000238:	200d      	movs	r0, #13
 800023a:	f000 f827 	bl	800028c <LED_setOff>
	LED_setOff(LED_RED);
 800023e:	200e      	movs	r0, #14
 8000240:	f000 f824 	bl	800028c <LED_setOff>
	LED_setOff(LED_BLUE);
 8000244:	200f      	movs	r0, #15
 8000246:	f000 f821 	bl	800028c <LED_setOff>
}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40023830 	.word	0x40023830
 8000258:	40020c00 	.word	0x40020c00

0800025c <LED_setOn>:

void LED_setOn(uint8_t ledNo)
{
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <LED_setOn+0x2c>)
 8000268:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << ledNo);
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	2101      	movs	r1, #1
 8000272:	fa01 f202 	lsl.w	r2, r1, r2
 8000276:	431a      	orrs	r2, r3
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	601a      	str	r2, [r3, #0]
}
 800027c:	bf00      	nop
 800027e:	3714      	adds	r7, #20
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	40020c14 	.word	0x40020c14

0800028c <LED_setOff>:

void LED_setOff(uint8_t ledNo)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000296:	4b09      	ldr	r3, [pc, #36]	; (80002bc <LED_setOff+0x30>)
 8000298:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << ledNo);
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	79fa      	ldrb	r2, [r7, #7]
 80002a0:	2101      	movs	r1, #1
 80002a2:	fa01 f202 	lsl.w	r2, r1, r2
 80002a6:	43d2      	mvns	r2, r2
 80002a8:	401a      	ands	r2, r3
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	601a      	str	r2, [r3, #0]
}
 80002ae:	bf00      	nop
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40020c14 	.word	0x40020c14

080002c0 <main>:
TaskControlBlock_t userTasks[MAX_TASKS];
uint8_t currentTask = TASK_ONE;
uint32_t globalTickCount = 0;

int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	RTOS_enableProcessorFaults();
 80002c4:	f000 fa52 	bl	800076c <RTOS_enableProcessorFaults>
	RTOS_initSchedulerStack(SCHED_STACK_START);
 80002c8:	4808      	ldr	r0, [pc, #32]	; (80002ec <main+0x2c>)
 80002ca:	f000 f88b 	bl	80003e4 <RTOS_initSchedulerStack>
	RTOS_initTaskControlBlock();
 80002ce:	f000 f909 	bl	80004e4 <RTOS_initTaskControlBlock>
	RTOS_initTasksStack();
 80002d2:	f000 f955 	bl	8000580 <RTOS_initTasksStack>
	LED_initAll();
 80002d6:	f7ff ff87 	bl	80001e8 <LED_initAll>
	RTOS_initSystickTimer(TICK_HZ);
 80002da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002de:	f000 f84b 	bl	8000378 <RTOS_initSystickTimer>
	RTOS_switchToPsp();
 80002e2:	f000 f8f1 	bl	80004c8 <RTOS_switchToPsp>
	/* Start from first task */
	RTOS_task1Handler();
 80002e6:	f000 f806 	bl	80002f6 <RTOS_task1Handler>
	for(;;);
 80002ea:	e7fe      	b.n	80002ea <main+0x2a>
 80002ec:	2001ec00 	.word	0x2001ec00

080002f0 <RTOS_idleTask>:
}

void RTOS_idleTask(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	while(1);
 80002f4:	e7fe      	b.n	80002f4 <RTOS_idleTask+0x4>

080002f6 <RTOS_task1Handler>:
}

void RTOS_task1Handler(void)
{
 80002f6:	b580      	push	{r7, lr}
 80002f8:	af00      	add	r7, sp, #0
	while(1)
	{
		LED_setOn(LED_GREEN);
 80002fa:	200c      	movs	r0, #12
 80002fc:	f7ff ffae 	bl	800025c <LED_setOn>
		RTOS_taskDelay(1000);
 8000300:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000304:	f000 f99a 	bl	800063c <RTOS_taskDelay>
		LED_setOff(LED_GREEN);
 8000308:	200c      	movs	r0, #12
 800030a:	f7ff ffbf 	bl	800028c <LED_setOff>
		RTOS_taskDelay(1000);
 800030e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000312:	f000 f993 	bl	800063c <RTOS_taskDelay>
		LED_setOn(LED_GREEN);
 8000316:	e7f0      	b.n	80002fa <RTOS_task1Handler+0x4>

08000318 <RTOS_task2Handler>:
	}
}

void RTOS_task2Handler(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	while(1)
	{
		LED_setOn(LED_ORANGE);
 800031c:	200d      	movs	r0, #13
 800031e:	f7ff ff9d 	bl	800025c <LED_setOn>
		RTOS_taskDelay(500);
 8000322:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000326:	f000 f989 	bl	800063c <RTOS_taskDelay>
		LED_setOff(LED_ORANGE);
 800032a:	200d      	movs	r0, #13
 800032c:	f7ff ffae 	bl	800028c <LED_setOff>
		RTOS_taskDelay(500);
 8000330:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000334:	f000 f982 	bl	800063c <RTOS_taskDelay>
		LED_setOn(LED_ORANGE);
 8000338:	e7f0      	b.n	800031c <RTOS_task2Handler+0x4>

0800033a <RTOS_task3Handler>:
	}
}

void RTOS_task3Handler(void)
{
 800033a:	b580      	push	{r7, lr}
 800033c:	af00      	add	r7, sp, #0
	while(1)
	{
		LED_setOn(LED_BLUE);
 800033e:	200f      	movs	r0, #15
 8000340:	f7ff ff8c 	bl	800025c <LED_setOn>
		RTOS_taskDelay(250);
 8000344:	20fa      	movs	r0, #250	; 0xfa
 8000346:	f000 f979 	bl	800063c <RTOS_taskDelay>
		LED_setOff(LED_BLUE);
 800034a:	200f      	movs	r0, #15
 800034c:	f7ff ff9e 	bl	800028c <LED_setOff>
		RTOS_taskDelay(250);
 8000350:	20fa      	movs	r0, #250	; 0xfa
 8000352:	f000 f973 	bl	800063c <RTOS_taskDelay>
		LED_setOn(LED_BLUE);
 8000356:	e7f2      	b.n	800033e <RTOS_task3Handler+0x4>

08000358 <RTOS_task4Handler>:
	}
}

void RTOS_task4Handler(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	while(1)
	{
		LED_setOn(LED_RED);
 800035c:	200e      	movs	r0, #14
 800035e:	f7ff ff7d 	bl	800025c <LED_setOn>
		RTOS_taskDelay(125);
 8000362:	207d      	movs	r0, #125	; 0x7d
 8000364:	f000 f96a 	bl	800063c <RTOS_taskDelay>
		LED_setOff(LED_RED);
 8000368:	200e      	movs	r0, #14
 800036a:	f7ff ff8f 	bl	800028c <LED_setOff>
		RTOS_taskDelay(125);
 800036e:	207d      	movs	r0, #125	; 0x7d
 8000370:	f000 f964 	bl	800063c <RTOS_taskDelay>
		LED_setOn(LED_RED);
 8000374:	e7f2      	b.n	800035c <RTOS_task4Handler+0x4>
	...

08000378 <RTOS_initSystickTimer>:
	}
}

void RTOS_initSystickTimer(uint32_t tick_hz)
{
 8000378:	b480      	push	{r7}
 800037a:	b087      	sub	sp, #28
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <RTOS_initSystickTimer+0x60>)
 8000382:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <RTOS_initSystickTimer+0x64>)
 8000386:	613b      	str	r3, [r7, #16]
    /* Calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz) - 1;
 8000388:	4a15      	ldr	r2, [pc, #84]	; (80003e0 <RTOS_initSystickTimer+0x68>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000390:	3b01      	subs	r3, #1
 8000392:	60fb      	str	r3, [r7, #12]
    /* Clear the value of SVR */
    *pSRVR &= ~(0x00FFFFFFFF);
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
    /* Load the value in to SVR */
    *pSRVR |= count_value;
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	431a      	orrs	r2, r3
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	601a      	str	r2, [r3, #0]
    /* Enable SysTick exception request */
    *pSCSR |= ( 1 << ONE);
 80003a6:	693b      	ldr	r3, [r7, #16]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f043 0202 	orr.w	r2, r3, #2
 80003ae:	693b      	ldr	r3, [r7, #16]
 80003b0:	601a      	str	r2, [r3, #0]
    /* Indicate the clock source: processor clock source */
    *pSCSR |= ( 1 << TWO);
 80003b2:	693b      	ldr	r3, [r7, #16]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f043 0204 	orr.w	r2, r3, #4
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	601a      	str	r2, [r3, #0]
    /* Enable the counter */
    *pSCSR |= ( 1 << ZERO);
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f043 0201 	orr.w	r2, r3, #1
 80003c6:	693b      	ldr	r3, [r7, #16]
 80003c8:	601a      	str	r2, [r3, #0]
}
 80003ca:	bf00      	nop
 80003cc:	371c      	adds	r7, #28
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	e000e014 	.word	0xe000e014
 80003dc:	e000e010 	.word	0xe000e010
 80003e0:	00f42400 	.word	0x00f42400

080003e4 <RTOS_initSchedulerStack>:

__attribute__((naked)) void RTOS_initSchedulerStack(uint32_t schedTopOfStack)
{
 80003e4:	4603      	mov	r3, r0
     __asm volatile("MSR MSP,%0": :  "r" (schedTopOfStack)  :   );
 80003e6:	f383 8808 	msr	MSP, r3
     __asm volatile("BX LR");
 80003ea:	4770      	bx	lr
}
 80003ec:	bf00      	nop
	...

080003f0 <RTOS_getPspValue>:

uint32_t RTOS_getPspValue(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
	return userTasks[currentTask].pspValue;
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <RTOS_getPspValue+0x1c>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	4a05      	ldr	r2, [pc, #20]	; (8000410 <RTOS_getPspValue+0x20>)
 80003fa:	011b      	lsls	r3, r3, #4
 80003fc:	4413      	add	r3, r2
 80003fe:	681b      	ldr	r3, [r3, #0]
}
 8000400:	4618      	mov	r0, r3
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	20000000 	.word	0x20000000
 8000410:	20000084 	.word	0x20000084

08000414 <RTOS_setPspValue>:

void RTOS_setPspValue(uint32_t currentPspAddress)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	userTasks[currentTask].pspValue = currentPspAddress;
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <RTOS_setPspValue+0x24>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	4a06      	ldr	r2, [pc, #24]	; (800043c <RTOS_setPspValue+0x28>)
 8000422:	011b      	lsls	r3, r3, #4
 8000424:	4413      	add	r3, r2
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	601a      	str	r2, [r3, #0]
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	20000000 	.word	0x20000000
 800043c:	20000084 	.word	0x20000084

08000440 <RTOS_updateNextTask>:

void RTOS_updateNextTask(void)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
	uint8_t currentState = TASK_BLOCKED_STATE;
 8000446:	23ff      	movs	r3, #255	; 0xff
 8000448:	71fb      	strb	r3, [r7, #7]
	for(uint8_t iTask = 0; iTask < MAX_TASKS; iTask++)
 800044a:	2300      	movs	r3, #0
 800044c:	71bb      	strb	r3, [r7, #6]
 800044e:	e024      	b.n	800049a <RTOS_updateNextTask+0x5a>
	{
		currentTask++;
 8000450:	4b1a      	ldr	r3, [pc, #104]	; (80004bc <RTOS_updateNextTask+0x7c>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	3301      	adds	r3, #1
 8000456:	b2da      	uxtb	r2, r3
 8000458:	4b18      	ldr	r3, [pc, #96]	; (80004bc <RTOS_updateNextTask+0x7c>)
 800045a:	701a      	strb	r2, [r3, #0]
		currentTask %= MAX_TASKS;
 800045c:	4b17      	ldr	r3, [pc, #92]	; (80004bc <RTOS_updateNextTask+0x7c>)
 800045e:	781a      	ldrb	r2, [r3, #0]
 8000460:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <RTOS_updateNextTask+0x80>)
 8000462:	fba3 1302 	umull	r1, r3, r3, r2
 8000466:	0899      	lsrs	r1, r3, #2
 8000468:	460b      	mov	r3, r1
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	440b      	add	r3, r1
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	b2da      	uxtb	r2, r3
 8000472:	4b12      	ldr	r3, [pc, #72]	; (80004bc <RTOS_updateNextTask+0x7c>)
 8000474:	701a      	strb	r2, [r3, #0]
		currentState = userTasks[currentTask].currentState;
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <RTOS_updateNextTask+0x7c>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	4a12      	ldr	r2, [pc, #72]	; (80004c4 <RTOS_updateNextTask+0x84>)
 800047c:	011b      	lsls	r3, r3, #4
 800047e:	4413      	add	r3, r2
 8000480:	3308      	adds	r3, #8
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	71fb      	strb	r3, [r7, #7]
		if(currentState == TASK_RUNNING_STATE && currentTask != IDLE_TASK)
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d103      	bne.n	8000494 <RTOS_updateNextTask+0x54>
 800048c:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <RTOS_updateNextTask+0x7c>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d106      	bne.n	80004a2 <RTOS_updateNextTask+0x62>
	for(uint8_t iTask = 0; iTask < MAX_TASKS; iTask++)
 8000494:	79bb      	ldrb	r3, [r7, #6]
 8000496:	3301      	adds	r3, #1
 8000498:	71bb      	strb	r3, [r7, #6]
 800049a:	79bb      	ldrb	r3, [r7, #6]
 800049c:	2b04      	cmp	r3, #4
 800049e:	d9d7      	bls.n	8000450 <RTOS_updateNextTask+0x10>
 80004a0:	e000      	b.n	80004a4 <RTOS_updateNextTask+0x64>
		{
			break;
 80004a2:	bf00      	nop
		}
	}
	if(currentState == TASK_BLOCKED_STATE)
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	2bff      	cmp	r3, #255	; 0xff
 80004a8:	d102      	bne.n	80004b0 <RTOS_updateNextTask+0x70>
	{
		currentTask = IDLE_TASK;
 80004aa:	4b04      	ldr	r3, [pc, #16]	; (80004bc <RTOS_updateNextTask+0x7c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
	}
}
 80004b0:	bf00      	nop
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr
 80004bc:	20000000 	.word	0x20000000
 80004c0:	cccccccd 	.word	0xcccccccd
 80004c4:	20000084 	.word	0x20000084

080004c8 <RTOS_switchToPsp>:

__attribute__((naked)) void RTOS_switchToPsp(void)
{
	/* Save original LR */
	__asm volatile("PUSH {LR}");
 80004c8:	b500      	push	{lr}
	__asm volatile("BL RTOS_getPspValue");
 80004ca:	f7ff ff91 	bl	80003f0 <RTOS_getPspValue>
	__asm volatile("MSR PSP, R0");
 80004ce:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 80004d2:	f85d eb04 	ldr.w	lr, [sp], #4
	/* Make PSP as default SP */
	__asm volatile("MOV R0, #0X02");
 80004d6:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0");
 80004da:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 80004de:	4770      	bx	lr
}
 80004e0:	bf00      	nop
	...

080004e4 <RTOS_initTaskControlBlock>:

void RTOS_initTaskControlBlock(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
	/* Set the initial state of each task */
	userTasks[IDLE_TASK].currentState = TASK_RUNNING_STATE;
 80004e8:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <RTOS_initTaskControlBlock+0x70>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	721a      	strb	r2, [r3, #8]
	userTasks[TASK_ONE].currentState = TASK_RUNNING_STATE;
 80004ee:	4b19      	ldr	r3, [pc, #100]	; (8000554 <RTOS_initTaskControlBlock+0x70>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	761a      	strb	r2, [r3, #24]
	userTasks[TASK_TWO].currentState = TASK_RUNNING_STATE;
 80004f4:	4b17      	ldr	r3, [pc, #92]	; (8000554 <RTOS_initTaskControlBlock+0x70>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	userTasks[TASK_THREE].currentState = TASK_RUNNING_STATE;
 80004fc:	4b15      	ldr	r3, [pc, #84]	; (8000554 <RTOS_initTaskControlBlock+0x70>)
 80004fe:	2200      	movs	r2, #0
 8000500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	userTasks[TASK_FOUR].currentState = TASK_RUNNING_STATE;
 8000504:	4b13      	ldr	r3, [pc, #76]	; (8000554 <RTOS_initTaskControlBlock+0x70>)
 8000506:	2200      	movs	r2, #0
 8000508:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	/* Set the initial PC of each task */
	userTasks[IDLE_TASK].taskHandler = RTOS_idleTask;
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <RTOS_initTaskControlBlock+0x70>)
 800050e:	4a12      	ldr	r2, [pc, #72]	; (8000558 <RTOS_initTaskControlBlock+0x74>)
 8000510:	60da      	str	r2, [r3, #12]
	userTasks[TASK_ONE].taskHandler = RTOS_task1Handler;
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <RTOS_initTaskControlBlock+0x70>)
 8000514:	4a11      	ldr	r2, [pc, #68]	; (800055c <RTOS_initTaskControlBlock+0x78>)
 8000516:	61da      	str	r2, [r3, #28]
	userTasks[TASK_TWO].taskHandler = RTOS_task2Handler;
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <RTOS_initTaskControlBlock+0x70>)
 800051a:	4a11      	ldr	r2, [pc, #68]	; (8000560 <RTOS_initTaskControlBlock+0x7c>)
 800051c:	62da      	str	r2, [r3, #44]	; 0x2c
	userTasks[TASK_THREE].taskHandler = RTOS_task3Handler;
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <RTOS_initTaskControlBlock+0x70>)
 8000520:	4a10      	ldr	r2, [pc, #64]	; (8000564 <RTOS_initTaskControlBlock+0x80>)
 8000522:	63da      	str	r2, [r3, #60]	; 0x3c
	userTasks[TASK_FOUR].taskHandler = RTOS_task4Handler;
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <RTOS_initTaskControlBlock+0x70>)
 8000526:	4a10      	ldr	r2, [pc, #64]	; (8000568 <RTOS_initTaskControlBlock+0x84>)
 8000528:	64da      	str	r2, [r3, #76]	; 0x4c
	/* Set the initial PSP value of each task */
	userTasks[IDLE_TASK].pspValue = IDLE_STACK_START;
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <RTOS_initTaskControlBlock+0x70>)
 800052c:	4a0f      	ldr	r2, [pc, #60]	; (800056c <RTOS_initTaskControlBlock+0x88>)
 800052e:	601a      	str	r2, [r3, #0]
	userTasks[TASK_ONE].pspValue = T1_STACK_START;
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <RTOS_initTaskControlBlock+0x70>)
 8000532:	4a0f      	ldr	r2, [pc, #60]	; (8000570 <RTOS_initTaskControlBlock+0x8c>)
 8000534:	611a      	str	r2, [r3, #16]
	userTasks[TASK_TWO].pspValue = T2_STACK_START;
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <RTOS_initTaskControlBlock+0x70>)
 8000538:	4a0e      	ldr	r2, [pc, #56]	; (8000574 <RTOS_initTaskControlBlock+0x90>)
 800053a:	621a      	str	r2, [r3, #32]
	userTasks[TASK_THREE].pspValue = T3_STACK_START;
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <RTOS_initTaskControlBlock+0x70>)
 800053e:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <RTOS_initTaskControlBlock+0x94>)
 8000540:	631a      	str	r2, [r3, #48]	; 0x30
	userTasks[TASK_FOUR].pspValue = T4_STACK_START;
 8000542:	4b04      	ldr	r3, [pc, #16]	; (8000554 <RTOS_initTaskControlBlock+0x70>)
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <RTOS_initTaskControlBlock+0x98>)
 8000546:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000084 	.word	0x20000084
 8000558:	080002f1 	.word	0x080002f1
 800055c:	080002f7 	.word	0x080002f7
 8000560:	08000319 	.word	0x08000319
 8000564:	0800033b 	.word	0x0800033b
 8000568:	08000359 	.word	0x08000359
 800056c:	2001f000 	.word	0x2001f000
 8000570:	20020000 	.word	0x20020000
 8000574:	2001fc00 	.word	0x2001fc00
 8000578:	2001f800 	.word	0x2001f800
 800057c:	2001f400 	.word	0x2001f400

08000580 <RTOS_initTasksStack>:

void RTOS_initTasksStack(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
	uint32_t* pPSP;
	for (uint8_t iTask = 0; iTask < MAX_TASKS; iTask++)
 8000586:	2300      	movs	r3, #0
 8000588:	70fb      	strb	r3, [r7, #3]
 800058a:	e037      	b.n	80005fc <RTOS_initTasksStack+0x7c>
	{
		pPSP = (uint32_t*) userTasks[iTask].pspValue;
 800058c:	78fb      	ldrb	r3, [r7, #3]
 800058e:	4a20      	ldr	r2, [pc, #128]	; (8000610 <RTOS_initTasksStack+0x90>)
 8000590:	011b      	lsls	r3, r3, #4
 8000592:	4413      	add	r3, r2
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	607b      	str	r3, [r7, #4]
		/* Stack model full descending */
		pPSP--;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3b04      	subs	r3, #4
 800059c:	607b      	str	r3, [r7, #4]
		*pPSP = XPSR_VALUE;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005a4:	601a      	str	r2, [r3, #0]
		pPSP--;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3b04      	subs	r3, #4
 80005aa:	607b      	str	r3, [r7, #4]
		*pPSP = (uint32_t) userTasks[iTask].taskHandler;
 80005ac:	78fb      	ldrb	r3, [r7, #3]
 80005ae:	4a18      	ldr	r2, [pc, #96]	; (8000610 <RTOS_initTasksStack+0x90>)
 80005b0:	011b      	lsls	r3, r3, #4
 80005b2:	4413      	add	r3, r2
 80005b4:	330c      	adds	r3, #12
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	601a      	str	r2, [r3, #0]
		pPSP--;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	3b04      	subs	r3, #4
 80005c2:	607b      	str	r3, [r7, #4]
		*pPSP = LR_VALUE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f06f 0202 	mvn.w	r2, #2
 80005ca:	601a      	str	r2, [r3, #0]
		for (uint8_t iRx = 0; iRx < MAX_CORE_REGISTERS; iRx++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	70bb      	strb	r3, [r7, #2]
 80005d0:	e008      	b.n	80005e4 <RTOS_initTasksStack+0x64>
		{
			pPSP--;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	3b04      	subs	r3, #4
 80005d6:	607b      	str	r3, [r7, #4]
			*pPSP = RX_DUMMY_FRAME_VALUE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
		for (uint8_t iRx = 0; iRx < MAX_CORE_REGISTERS; iRx++)
 80005de:	78bb      	ldrb	r3, [r7, #2]
 80005e0:	3301      	adds	r3, #1
 80005e2:	70bb      	strb	r3, [r7, #2]
 80005e4:	78bb      	ldrb	r3, [r7, #2]
 80005e6:	2b0c      	cmp	r3, #12
 80005e8:	d9f3      	bls.n	80005d2 <RTOS_initTasksStack+0x52>
		}
		/* Store the final value of PSP for each task to return them later */
		userTasks[iTask].pspValue = (uint32_t)pPSP;
 80005ea:	78fb      	ldrb	r3, [r7, #3]
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	4908      	ldr	r1, [pc, #32]	; (8000610 <RTOS_initTasksStack+0x90>)
 80005f0:	011b      	lsls	r3, r3, #4
 80005f2:	440b      	add	r3, r1
 80005f4:	601a      	str	r2, [r3, #0]
	for (uint8_t iTask = 0; iTask < MAX_TASKS; iTask++)
 80005f6:	78fb      	ldrb	r3, [r7, #3]
 80005f8:	3301      	adds	r3, #1
 80005fa:	70fb      	strb	r3, [r7, #3]
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	2b04      	cmp	r3, #4
 8000600:	d9c4      	bls.n	800058c <RTOS_initTasksStack+0xc>
	}
}
 8000602:	bf00      	nop
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	20000084 	.word	0x20000084

08000614 <RTOS_schedule>:

void RTOS_schedule(void)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
	uint32_t* pICSR = (uint32_t*)0xE000ED04;
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <RTOS_schedule+0x24>)
 800061c:	607b      	str	r3, [r7, #4]
	*pICSR |= 1 << PENDSVSET;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	601a      	str	r2, [r3, #0]
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	e000ed04 	.word	0xe000ed04

0800063c <RTOS_taskDelay>:

void RTOS_taskDelay(uint32_t tickCount)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	INTERRUPT_DISABLE();
 8000644:	f04f 0001 	mov.w	r0, #1
 8000648:	f380 8810 	msr	PRIMASK, r0
	if(currentTask != IDLE_TASK)
 800064c:	4b10      	ldr	r3, [pc, #64]	; (8000690 <RTOS_taskDelay+0x54>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d015      	beq.n	8000680 <RTOS_taskDelay+0x44>
	{
		userTasks[currentTask].blockCount = globalTickCount + tickCount;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <RTOS_taskDelay+0x58>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <RTOS_taskDelay+0x54>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	441a      	add	r2, r3
 8000662:	490d      	ldr	r1, [pc, #52]	; (8000698 <RTOS_taskDelay+0x5c>)
 8000664:	0103      	lsls	r3, r0, #4
 8000666:	440b      	add	r3, r1
 8000668:	3304      	adds	r3, #4
 800066a:	601a      	str	r2, [r3, #0]
		userTasks[currentTask].currentState = TASK_BLOCKED_STATE;
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <RTOS_taskDelay+0x54>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4a09      	ldr	r2, [pc, #36]	; (8000698 <RTOS_taskDelay+0x5c>)
 8000672:	011b      	lsls	r3, r3, #4
 8000674:	4413      	add	r3, r2
 8000676:	3308      	adds	r3, #8
 8000678:	22ff      	movs	r2, #255	; 0xff
 800067a:	701a      	strb	r2, [r3, #0]
		RTOS_schedule();
 800067c:	f7ff ffca 	bl	8000614 <RTOS_schedule>
	}
	INTERRUPT_ENABLE();
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	f380 8810 	msr	PRIMASK, r0
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000000 	.word	0x20000000
 8000694:	200000d4 	.word	0x200000d4
 8000698:	20000084 	.word	0x20000084

0800069c <RTOS_updateGlobalTickCount>:

void RTOS_updateGlobalTickCount(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
	globalTickCount++;
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <RTOS_updateGlobalTickCount+0x18>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <RTOS_updateGlobalTickCount+0x18>)
 80006a8:	6013      	str	r3, [r2, #0]
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	200000d4 	.word	0x200000d4

080006b8 <RTOS_unblockTasks>:

void RTOS_unblockTasks(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
	for(uint8_t iTask = TASK_ONE; iTask < MAX_TASKS; iTask++)
 80006be:	2301      	movs	r3, #1
 80006c0:	71fb      	strb	r3, [r7, #7]
 80006c2:	e01b      	b.n	80006fc <RTOS_unblockTasks+0x44>
	{
		if(userTasks[iTask].currentState != TASK_RUNNING_STATE)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <RTOS_unblockTasks+0x58>)
 80006c8:	011b      	lsls	r3, r3, #4
 80006ca:	4413      	add	r3, r2
 80006cc:	3308      	adds	r3, #8
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d010      	beq.n	80006f6 <RTOS_unblockTasks+0x3e>
		{
			if(userTasks[iTask].blockCount == globalTickCount)
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <RTOS_unblockTasks+0x58>)
 80006d8:	011b      	lsls	r3, r3, #4
 80006da:	4413      	add	r3, r2
 80006dc:	3304      	adds	r3, #4
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <RTOS_unblockTasks+0x5c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d106      	bne.n	80006f6 <RTOS_unblockTasks+0x3e>
			{
				userTasks[iTask].currentState = TASK_RUNNING_STATE;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	4a09      	ldr	r2, [pc, #36]	; (8000710 <RTOS_unblockTasks+0x58>)
 80006ec:	011b      	lsls	r3, r3, #4
 80006ee:	4413      	add	r3, r2
 80006f0:	3308      	adds	r3, #8
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
	for(uint8_t iTask = TASK_ONE; iTask < MAX_TASKS; iTask++)
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	3301      	adds	r3, #1
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	2b04      	cmp	r3, #4
 8000700:	d9e0      	bls.n	80006c4 <RTOS_unblockTasks+0xc>
			}
		}
	}
}
 8000702:	bf00      	nop
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	20000084 	.word	0x20000084
 8000714:	200000d4 	.word	0x200000d4

08000718 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <SysTick_Handler+0x28>)
 8000720:	607b      	str	r3, [r7, #4]
	RTOS_updateGlobalTickCount();
 8000722:	f7ff ffbb 	bl	800069c <RTOS_updateGlobalTickCount>
	RTOS_unblockTasks();
 8000726:	f7ff ffc7 	bl	80006b8 <RTOS_unblockTasks>
	*pICSR |= 1 << PENDSVSET;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	e000ed04 	.word	0xe000ed04

08000744 <PendSV_Handler>:

__attribute__((naked)) void PendSV_Handler(void)
{
	/* Save the context of current task */
	__asm volatile("MRS R0, PSP");
 8000744:	f3ef 8009 	mrs	r0, PSP
	__asm volatile("STMDB R0!, {R4-R11}");
 8000748:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	/* Save original LR */
	__asm volatile("PUSH {LR}");
 800074c:	b500      	push	{lr}
	__asm volatile("BL RTOS_setPspValue");
 800074e:	f7ff fe61 	bl	8000414 <RTOS_setPspValue>
	/* Retrieve the context of next task */
	__asm volatile("BL RTOS_updateNextTask");
 8000752:	f7ff fe75 	bl	8000440 <RTOS_updateNextTask>
	__asm volatile("BL RTOS_getPspValue");
 8000756:	f7ff fe4b 	bl	80003f0 <RTOS_getPspValue>
	__asm volatile("LDMIA R0!, {R4-R11}");
 800075a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("MSR PSP, R0");
 800075e:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 8000762:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 8000766:	4770      	bx	lr
}
 8000768:	bf00      	nop
	...

0800076c <RTOS_enableProcessorFaults>:

void RTOS_enableProcessorFaults(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <RTOS_enableProcessorFaults+0x3c>)
 8000774:	607b      	str	r3, [r7, #4]
	*pSHCSR |= ( 1 << MEMFAULTENA);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << BUSFAULTENA);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << USGFAULTENA);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	601a      	str	r2, [r3, #0]
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed24 	.word	0xe000ed24

080007ac <HardFault_Handler>:

void HardFault_Handler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 80007b0:	4801      	ldr	r0, [pc, #4]	; (80007b8 <HardFault_Handler+0xc>)
 80007b2:	f000 f99f 	bl	8000af4 <puts>
	while(1);
 80007b6:	e7fe      	b.n	80007b6 <HardFault_Handler+0xa>
 80007b8:	0800142c 	.word	0x0800142c

080007bc <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 80007c0:	4801      	ldr	r0, [pc, #4]	; (80007c8 <MemManage_Handler+0xc>)
 80007c2:	f000 f997 	bl	8000af4 <puts>
	while(1);
 80007c6:	e7fe      	b.n	80007c6 <MemManage_Handler+0xa>
 80007c8:	08001444 	.word	0x08001444

080007cc <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 80007d0:	4801      	ldr	r0, [pc, #4]	; (80007d8 <BusFault_Handler+0xc>)
 80007d2:	f000 f98f 	bl	8000af4 <puts>
	while(1);
 80007d6:	e7fe      	b.n	80007d6 <BusFault_Handler+0xa>
 80007d8:	0800145c 	.word	0x0800145c

080007dc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <ITM_SendChar+0x48>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <ITM_SendChar+0x48>)
 80007ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007f0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <ITM_SendChar+0x4c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <ITM_SendChar+0x4c>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007fe:	bf00      	nop
 8000800:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	2b00      	cmp	r3, #0
 800080c:	d0f8      	beq.n	8000800 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800080e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	6013      	str	r3, [r2, #0]
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000edfc 	.word	0xe000edfc
 8000828:	e0000e00 	.word	0xe0000e00

0800082c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	e00a      	b.n	8000854 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800083e:	f3af 8000 	nop.w
 8000842:	4601      	mov	r1, r0
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	60ba      	str	r2, [r7, #8]
 800084a:	b2ca      	uxtb	r2, r1
 800084c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	3301      	adds	r3, #1
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697a      	ldr	r2, [r7, #20]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	429a      	cmp	r2, r3
 800085a:	dbf0      	blt.n	800083e <_read+0x12>
	}

return len;
 800085c:	687b      	ldr	r3, [r7, #4]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b086      	sub	sp, #24
 800086a:	af00      	add	r7, sp, #0
 800086c:	60f8      	str	r0, [r7, #12]
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
 8000876:	e009      	b.n	800088c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	60ba      	str	r2, [r7, #8]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ffab 	bl	80007dc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	3301      	adds	r3, #1
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	429a      	cmp	r2, r3
 8000892:	dbf1      	blt.n	8000878 <_write+0x12>
	}
	return len;
 8000894:	687b      	ldr	r3, [r7, #4]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <_close>:

int _close(int file)
{
 800089e:	b480      	push	{r7}
 80008a0:	b083      	sub	sp, #12
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
	return -1;
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
 80008be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008c6:	605a      	str	r2, [r3, #4]
	return 0;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <_isatty>:

int _isatty(int file)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
	return 1;
 80008de:	2301      	movs	r3, #1
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
	return 0;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <_sbrk+0x50>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d102      	bne.n	800091e <_sbrk+0x16>
		heap_end = &end;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <_sbrk+0x50>)
 800091a:	4a10      	ldr	r2, [pc, #64]	; (800095c <_sbrk+0x54>)
 800091c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <_sbrk+0x50>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <_sbrk+0x50>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4413      	add	r3, r2
 800092c:	466a      	mov	r2, sp
 800092e:	4293      	cmp	r3, r2
 8000930:	d907      	bls.n	8000942 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000932:	f000 f83f 	bl	80009b4 <__errno>
 8000936:	4603      	mov	r3, r0
 8000938:	220c      	movs	r2, #12
 800093a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
 8000940:	e006      	b.n	8000950 <_sbrk+0x48>
	}

	heap_end += incr;
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <_sbrk+0x50>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4413      	add	r3, r2
 800094a:	4a03      	ldr	r2, [pc, #12]	; (8000958 <_sbrk+0x50>)
 800094c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800094e:	68fb      	ldr	r3, [r7, #12]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200000d8 	.word	0x200000d8
 800095c:	200000f0 	.word	0x200000f0

08000960 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000962:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <LoopForever+0x6>)
  ldr r1, =_edata
 8000966:	490e      	ldr	r1, [pc, #56]	; (80009a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000968:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <LoopForever+0xe>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800097c:	4c0b      	ldr	r4, [pc, #44]	; (80009ac <LoopForever+0x16>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800098a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800098e:	f000 f817 	bl	80009c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000992:	f7ff fc95 	bl	80002c0 <main>

08000996 <LoopForever>:

LoopForever:
    b LoopForever
 8000996:	e7fe      	b.n	8000996 <LoopForever>
  ldr   r0, =_estack
 8000998:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009a4:	080014e0 	.word	0x080014e0
  ldr r2, =_sbss
 80009a8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80009ac:	200000ec 	.word	0x200000ec

080009b0 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC_IRQHandler>
	...

080009b4 <__errno>:
 80009b4:	4b01      	ldr	r3, [pc, #4]	; (80009bc <__errno+0x8>)
 80009b6:	6818      	ldr	r0, [r3, #0]
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000004 	.word	0x20000004

080009c0 <__libc_init_array>:
 80009c0:	b570      	push	{r4, r5, r6, lr}
 80009c2:	4d0d      	ldr	r5, [pc, #52]	; (80009f8 <__libc_init_array+0x38>)
 80009c4:	4c0d      	ldr	r4, [pc, #52]	; (80009fc <__libc_init_array+0x3c>)
 80009c6:	1b64      	subs	r4, r4, r5
 80009c8:	10a4      	asrs	r4, r4, #2
 80009ca:	2600      	movs	r6, #0
 80009cc:	42a6      	cmp	r6, r4
 80009ce:	d109      	bne.n	80009e4 <__libc_init_array+0x24>
 80009d0:	4d0b      	ldr	r5, [pc, #44]	; (8000a00 <__libc_init_array+0x40>)
 80009d2:	4c0c      	ldr	r4, [pc, #48]	; (8000a04 <__libc_init_array+0x44>)
 80009d4:	f000 fd1e 	bl	8001414 <_init>
 80009d8:	1b64      	subs	r4, r4, r5
 80009da:	10a4      	asrs	r4, r4, #2
 80009dc:	2600      	movs	r6, #0
 80009de:	42a6      	cmp	r6, r4
 80009e0:	d105      	bne.n	80009ee <__libc_init_array+0x2e>
 80009e2:	bd70      	pop	{r4, r5, r6, pc}
 80009e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009e8:	4798      	blx	r3
 80009ea:	3601      	adds	r6, #1
 80009ec:	e7ee      	b.n	80009cc <__libc_init_array+0xc>
 80009ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80009f2:	4798      	blx	r3
 80009f4:	3601      	adds	r6, #1
 80009f6:	e7f2      	b.n	80009de <__libc_init_array+0x1e>
 80009f8:	080014d8 	.word	0x080014d8
 80009fc:	080014d8 	.word	0x080014d8
 8000a00:	080014d8 	.word	0x080014d8
 8000a04:	080014dc 	.word	0x080014dc

08000a08 <memset>:
 8000a08:	4402      	add	r2, r0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d100      	bne.n	8000a12 <memset+0xa>
 8000a10:	4770      	bx	lr
 8000a12:	f803 1b01 	strb.w	r1, [r3], #1
 8000a16:	e7f9      	b.n	8000a0c <memset+0x4>

08000a18 <_puts_r>:
 8000a18:	b570      	push	{r4, r5, r6, lr}
 8000a1a:	460e      	mov	r6, r1
 8000a1c:	4605      	mov	r5, r0
 8000a1e:	b118      	cbz	r0, 8000a28 <_puts_r+0x10>
 8000a20:	6983      	ldr	r3, [r0, #24]
 8000a22:	b90b      	cbnz	r3, 8000a28 <_puts_r+0x10>
 8000a24:	f000 fa48 	bl	8000eb8 <__sinit>
 8000a28:	69ab      	ldr	r3, [r5, #24]
 8000a2a:	68ac      	ldr	r4, [r5, #8]
 8000a2c:	b913      	cbnz	r3, 8000a34 <_puts_r+0x1c>
 8000a2e:	4628      	mov	r0, r5
 8000a30:	f000 fa42 	bl	8000eb8 <__sinit>
 8000a34:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <_puts_r+0xd0>)
 8000a36:	429c      	cmp	r4, r3
 8000a38:	d120      	bne.n	8000a7c <_puts_r+0x64>
 8000a3a:	686c      	ldr	r4, [r5, #4]
 8000a3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a3e:	07db      	lsls	r3, r3, #31
 8000a40:	d405      	bmi.n	8000a4e <_puts_r+0x36>
 8000a42:	89a3      	ldrh	r3, [r4, #12]
 8000a44:	0598      	lsls	r0, r3, #22
 8000a46:	d402      	bmi.n	8000a4e <_puts_r+0x36>
 8000a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a4a:	f000 fad3 	bl	8000ff4 <__retarget_lock_acquire_recursive>
 8000a4e:	89a3      	ldrh	r3, [r4, #12]
 8000a50:	0719      	lsls	r1, r3, #28
 8000a52:	d51d      	bpl.n	8000a90 <_puts_r+0x78>
 8000a54:	6923      	ldr	r3, [r4, #16]
 8000a56:	b1db      	cbz	r3, 8000a90 <_puts_r+0x78>
 8000a58:	3e01      	subs	r6, #1
 8000a5a:	68a3      	ldr	r3, [r4, #8]
 8000a5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000a60:	3b01      	subs	r3, #1
 8000a62:	60a3      	str	r3, [r4, #8]
 8000a64:	bb39      	cbnz	r1, 8000ab6 <_puts_r+0x9e>
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	da38      	bge.n	8000adc <_puts_r+0xc4>
 8000a6a:	4622      	mov	r2, r4
 8000a6c:	210a      	movs	r1, #10
 8000a6e:	4628      	mov	r0, r5
 8000a70:	f000 f848 	bl	8000b04 <__swbuf_r>
 8000a74:	3001      	adds	r0, #1
 8000a76:	d011      	beq.n	8000a9c <_puts_r+0x84>
 8000a78:	250a      	movs	r5, #10
 8000a7a:	e011      	b.n	8000aa0 <_puts_r+0x88>
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <_puts_r+0xd4>)
 8000a7e:	429c      	cmp	r4, r3
 8000a80:	d101      	bne.n	8000a86 <_puts_r+0x6e>
 8000a82:	68ac      	ldr	r4, [r5, #8]
 8000a84:	e7da      	b.n	8000a3c <_puts_r+0x24>
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <_puts_r+0xd8>)
 8000a88:	429c      	cmp	r4, r3
 8000a8a:	bf08      	it	eq
 8000a8c:	68ec      	ldreq	r4, [r5, #12]
 8000a8e:	e7d5      	b.n	8000a3c <_puts_r+0x24>
 8000a90:	4621      	mov	r1, r4
 8000a92:	4628      	mov	r0, r5
 8000a94:	f000 f888 	bl	8000ba8 <__swsetup_r>
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	d0dd      	beq.n	8000a58 <_puts_r+0x40>
 8000a9c:	f04f 35ff 	mov.w	r5, #4294967295
 8000aa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000aa2:	07da      	lsls	r2, r3, #31
 8000aa4:	d405      	bmi.n	8000ab2 <_puts_r+0x9a>
 8000aa6:	89a3      	ldrh	r3, [r4, #12]
 8000aa8:	059b      	lsls	r3, r3, #22
 8000aaa:	d402      	bmi.n	8000ab2 <_puts_r+0x9a>
 8000aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000aae:	f000 faa2 	bl	8000ff6 <__retarget_lock_release_recursive>
 8000ab2:	4628      	mov	r0, r5
 8000ab4:	bd70      	pop	{r4, r5, r6, pc}
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da04      	bge.n	8000ac4 <_puts_r+0xac>
 8000aba:	69a2      	ldr	r2, [r4, #24]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	dc06      	bgt.n	8000ace <_puts_r+0xb6>
 8000ac0:	290a      	cmp	r1, #10
 8000ac2:	d004      	beq.n	8000ace <_puts_r+0xb6>
 8000ac4:	6823      	ldr	r3, [r4, #0]
 8000ac6:	1c5a      	adds	r2, r3, #1
 8000ac8:	6022      	str	r2, [r4, #0]
 8000aca:	7019      	strb	r1, [r3, #0]
 8000acc:	e7c5      	b.n	8000a5a <_puts_r+0x42>
 8000ace:	4622      	mov	r2, r4
 8000ad0:	4628      	mov	r0, r5
 8000ad2:	f000 f817 	bl	8000b04 <__swbuf_r>
 8000ad6:	3001      	adds	r0, #1
 8000ad8:	d1bf      	bne.n	8000a5a <_puts_r+0x42>
 8000ada:	e7df      	b.n	8000a9c <_puts_r+0x84>
 8000adc:	6823      	ldr	r3, [r4, #0]
 8000ade:	250a      	movs	r5, #10
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	6022      	str	r2, [r4, #0]
 8000ae4:	701d      	strb	r5, [r3, #0]
 8000ae6:	e7db      	b.n	8000aa0 <_puts_r+0x88>
 8000ae8:	08001498 	.word	0x08001498
 8000aec:	080014b8 	.word	0x080014b8
 8000af0:	08001478 	.word	0x08001478

08000af4 <puts>:
 8000af4:	4b02      	ldr	r3, [pc, #8]	; (8000b00 <puts+0xc>)
 8000af6:	4601      	mov	r1, r0
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	f7ff bf8d 	b.w	8000a18 <_puts_r>
 8000afe:	bf00      	nop
 8000b00:	20000004 	.word	0x20000004

08000b04 <__swbuf_r>:
 8000b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b06:	460e      	mov	r6, r1
 8000b08:	4614      	mov	r4, r2
 8000b0a:	4605      	mov	r5, r0
 8000b0c:	b118      	cbz	r0, 8000b16 <__swbuf_r+0x12>
 8000b0e:	6983      	ldr	r3, [r0, #24]
 8000b10:	b90b      	cbnz	r3, 8000b16 <__swbuf_r+0x12>
 8000b12:	f000 f9d1 	bl	8000eb8 <__sinit>
 8000b16:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <__swbuf_r+0x98>)
 8000b18:	429c      	cmp	r4, r3
 8000b1a:	d12b      	bne.n	8000b74 <__swbuf_r+0x70>
 8000b1c:	686c      	ldr	r4, [r5, #4]
 8000b1e:	69a3      	ldr	r3, [r4, #24]
 8000b20:	60a3      	str	r3, [r4, #8]
 8000b22:	89a3      	ldrh	r3, [r4, #12]
 8000b24:	071a      	lsls	r2, r3, #28
 8000b26:	d52f      	bpl.n	8000b88 <__swbuf_r+0x84>
 8000b28:	6923      	ldr	r3, [r4, #16]
 8000b2a:	b36b      	cbz	r3, 8000b88 <__swbuf_r+0x84>
 8000b2c:	6923      	ldr	r3, [r4, #16]
 8000b2e:	6820      	ldr	r0, [r4, #0]
 8000b30:	1ac0      	subs	r0, r0, r3
 8000b32:	6963      	ldr	r3, [r4, #20]
 8000b34:	b2f6      	uxtb	r6, r6
 8000b36:	4283      	cmp	r3, r0
 8000b38:	4637      	mov	r7, r6
 8000b3a:	dc04      	bgt.n	8000b46 <__swbuf_r+0x42>
 8000b3c:	4621      	mov	r1, r4
 8000b3e:	4628      	mov	r0, r5
 8000b40:	f000 f926 	bl	8000d90 <_fflush_r>
 8000b44:	bb30      	cbnz	r0, 8000b94 <__swbuf_r+0x90>
 8000b46:	68a3      	ldr	r3, [r4, #8]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	60a3      	str	r3, [r4, #8]
 8000b4c:	6823      	ldr	r3, [r4, #0]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	6022      	str	r2, [r4, #0]
 8000b52:	701e      	strb	r6, [r3, #0]
 8000b54:	6963      	ldr	r3, [r4, #20]
 8000b56:	3001      	adds	r0, #1
 8000b58:	4283      	cmp	r3, r0
 8000b5a:	d004      	beq.n	8000b66 <__swbuf_r+0x62>
 8000b5c:	89a3      	ldrh	r3, [r4, #12]
 8000b5e:	07db      	lsls	r3, r3, #31
 8000b60:	d506      	bpl.n	8000b70 <__swbuf_r+0x6c>
 8000b62:	2e0a      	cmp	r6, #10
 8000b64:	d104      	bne.n	8000b70 <__swbuf_r+0x6c>
 8000b66:	4621      	mov	r1, r4
 8000b68:	4628      	mov	r0, r5
 8000b6a:	f000 f911 	bl	8000d90 <_fflush_r>
 8000b6e:	b988      	cbnz	r0, 8000b94 <__swbuf_r+0x90>
 8000b70:	4638      	mov	r0, r7
 8000b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <__swbuf_r+0x9c>)
 8000b76:	429c      	cmp	r4, r3
 8000b78:	d101      	bne.n	8000b7e <__swbuf_r+0x7a>
 8000b7a:	68ac      	ldr	r4, [r5, #8]
 8000b7c:	e7cf      	b.n	8000b1e <__swbuf_r+0x1a>
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <__swbuf_r+0xa0>)
 8000b80:	429c      	cmp	r4, r3
 8000b82:	bf08      	it	eq
 8000b84:	68ec      	ldreq	r4, [r5, #12]
 8000b86:	e7ca      	b.n	8000b1e <__swbuf_r+0x1a>
 8000b88:	4621      	mov	r1, r4
 8000b8a:	4628      	mov	r0, r5
 8000b8c:	f000 f80c 	bl	8000ba8 <__swsetup_r>
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d0cb      	beq.n	8000b2c <__swbuf_r+0x28>
 8000b94:	f04f 37ff 	mov.w	r7, #4294967295
 8000b98:	e7ea      	b.n	8000b70 <__swbuf_r+0x6c>
 8000b9a:	bf00      	nop
 8000b9c:	08001498 	.word	0x08001498
 8000ba0:	080014b8 	.word	0x080014b8
 8000ba4:	08001478 	.word	0x08001478

08000ba8 <__swsetup_r>:
 8000ba8:	4b32      	ldr	r3, [pc, #200]	; (8000c74 <__swsetup_r+0xcc>)
 8000baa:	b570      	push	{r4, r5, r6, lr}
 8000bac:	681d      	ldr	r5, [r3, #0]
 8000bae:	4606      	mov	r6, r0
 8000bb0:	460c      	mov	r4, r1
 8000bb2:	b125      	cbz	r5, 8000bbe <__swsetup_r+0x16>
 8000bb4:	69ab      	ldr	r3, [r5, #24]
 8000bb6:	b913      	cbnz	r3, 8000bbe <__swsetup_r+0x16>
 8000bb8:	4628      	mov	r0, r5
 8000bba:	f000 f97d 	bl	8000eb8 <__sinit>
 8000bbe:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <__swsetup_r+0xd0>)
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	d10f      	bne.n	8000be4 <__swsetup_r+0x3c>
 8000bc4:	686c      	ldr	r4, [r5, #4]
 8000bc6:	89a3      	ldrh	r3, [r4, #12]
 8000bc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000bcc:	0719      	lsls	r1, r3, #28
 8000bce:	d42c      	bmi.n	8000c2a <__swsetup_r+0x82>
 8000bd0:	06dd      	lsls	r5, r3, #27
 8000bd2:	d411      	bmi.n	8000bf8 <__swsetup_r+0x50>
 8000bd4:	2309      	movs	r3, #9
 8000bd6:	6033      	str	r3, [r6, #0]
 8000bd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000bdc:	81a3      	strh	r3, [r4, #12]
 8000bde:	f04f 30ff 	mov.w	r0, #4294967295
 8000be2:	e03e      	b.n	8000c62 <__swsetup_r+0xba>
 8000be4:	4b25      	ldr	r3, [pc, #148]	; (8000c7c <__swsetup_r+0xd4>)
 8000be6:	429c      	cmp	r4, r3
 8000be8:	d101      	bne.n	8000bee <__swsetup_r+0x46>
 8000bea:	68ac      	ldr	r4, [r5, #8]
 8000bec:	e7eb      	b.n	8000bc6 <__swsetup_r+0x1e>
 8000bee:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <__swsetup_r+0xd8>)
 8000bf0:	429c      	cmp	r4, r3
 8000bf2:	bf08      	it	eq
 8000bf4:	68ec      	ldreq	r4, [r5, #12]
 8000bf6:	e7e6      	b.n	8000bc6 <__swsetup_r+0x1e>
 8000bf8:	0758      	lsls	r0, r3, #29
 8000bfa:	d512      	bpl.n	8000c22 <__swsetup_r+0x7a>
 8000bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bfe:	b141      	cbz	r1, 8000c12 <__swsetup_r+0x6a>
 8000c00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d002      	beq.n	8000c0e <__swsetup_r+0x66>
 8000c08:	4630      	mov	r0, r6
 8000c0a:	f000 fa5b 	bl	80010c4 <_free_r>
 8000c0e:	2300      	movs	r3, #0
 8000c10:	6363      	str	r3, [r4, #52]	; 0x34
 8000c12:	89a3      	ldrh	r3, [r4, #12]
 8000c14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000c18:	81a3      	strh	r3, [r4, #12]
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	6063      	str	r3, [r4, #4]
 8000c1e:	6923      	ldr	r3, [r4, #16]
 8000c20:	6023      	str	r3, [r4, #0]
 8000c22:	89a3      	ldrh	r3, [r4, #12]
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	81a3      	strh	r3, [r4, #12]
 8000c2a:	6923      	ldr	r3, [r4, #16]
 8000c2c:	b94b      	cbnz	r3, 8000c42 <__swsetup_r+0x9a>
 8000c2e:	89a3      	ldrh	r3, [r4, #12]
 8000c30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c38:	d003      	beq.n	8000c42 <__swsetup_r+0x9a>
 8000c3a:	4621      	mov	r1, r4
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	f000 fa01 	bl	8001044 <__smakebuf_r>
 8000c42:	89a0      	ldrh	r0, [r4, #12]
 8000c44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c48:	f010 0301 	ands.w	r3, r0, #1
 8000c4c:	d00a      	beq.n	8000c64 <__swsetup_r+0xbc>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60a3      	str	r3, [r4, #8]
 8000c52:	6963      	ldr	r3, [r4, #20]
 8000c54:	425b      	negs	r3, r3
 8000c56:	61a3      	str	r3, [r4, #24]
 8000c58:	6923      	ldr	r3, [r4, #16]
 8000c5a:	b943      	cbnz	r3, 8000c6e <__swsetup_r+0xc6>
 8000c5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000c60:	d1ba      	bne.n	8000bd8 <__swsetup_r+0x30>
 8000c62:	bd70      	pop	{r4, r5, r6, pc}
 8000c64:	0781      	lsls	r1, r0, #30
 8000c66:	bf58      	it	pl
 8000c68:	6963      	ldrpl	r3, [r4, #20]
 8000c6a:	60a3      	str	r3, [r4, #8]
 8000c6c:	e7f4      	b.n	8000c58 <__swsetup_r+0xb0>
 8000c6e:	2000      	movs	r0, #0
 8000c70:	e7f7      	b.n	8000c62 <__swsetup_r+0xba>
 8000c72:	bf00      	nop
 8000c74:	20000004 	.word	0x20000004
 8000c78:	08001498 	.word	0x08001498
 8000c7c:	080014b8 	.word	0x080014b8
 8000c80:	08001478 	.word	0x08001478

08000c84 <__sflush_r>:
 8000c84:	898a      	ldrh	r2, [r1, #12]
 8000c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c8a:	4605      	mov	r5, r0
 8000c8c:	0710      	lsls	r0, r2, #28
 8000c8e:	460c      	mov	r4, r1
 8000c90:	d458      	bmi.n	8000d44 <__sflush_r+0xc0>
 8000c92:	684b      	ldr	r3, [r1, #4]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	dc05      	bgt.n	8000ca4 <__sflush_r+0x20>
 8000c98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	dc02      	bgt.n	8000ca4 <__sflush_r+0x20>
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d0f9      	beq.n	8000c9e <__sflush_r+0x1a>
 8000caa:	2300      	movs	r3, #0
 8000cac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000cb0:	682f      	ldr	r7, [r5, #0]
 8000cb2:	602b      	str	r3, [r5, #0]
 8000cb4:	d032      	beq.n	8000d1c <__sflush_r+0x98>
 8000cb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000cb8:	89a3      	ldrh	r3, [r4, #12]
 8000cba:	075a      	lsls	r2, r3, #29
 8000cbc:	d505      	bpl.n	8000cca <__sflush_r+0x46>
 8000cbe:	6863      	ldr	r3, [r4, #4]
 8000cc0:	1ac0      	subs	r0, r0, r3
 8000cc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000cc4:	b10b      	cbz	r3, 8000cca <__sflush_r+0x46>
 8000cc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000cc8:	1ac0      	subs	r0, r0, r3
 8000cca:	2300      	movs	r3, #0
 8000ccc:	4602      	mov	r2, r0
 8000cce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000cd0:	6a21      	ldr	r1, [r4, #32]
 8000cd2:	4628      	mov	r0, r5
 8000cd4:	47b0      	blx	r6
 8000cd6:	1c43      	adds	r3, r0, #1
 8000cd8:	89a3      	ldrh	r3, [r4, #12]
 8000cda:	d106      	bne.n	8000cea <__sflush_r+0x66>
 8000cdc:	6829      	ldr	r1, [r5, #0]
 8000cde:	291d      	cmp	r1, #29
 8000ce0:	d82c      	bhi.n	8000d3c <__sflush_r+0xb8>
 8000ce2:	4a2a      	ldr	r2, [pc, #168]	; (8000d8c <__sflush_r+0x108>)
 8000ce4:	40ca      	lsrs	r2, r1
 8000ce6:	07d6      	lsls	r6, r2, #31
 8000ce8:	d528      	bpl.n	8000d3c <__sflush_r+0xb8>
 8000cea:	2200      	movs	r2, #0
 8000cec:	6062      	str	r2, [r4, #4]
 8000cee:	04d9      	lsls	r1, r3, #19
 8000cf0:	6922      	ldr	r2, [r4, #16]
 8000cf2:	6022      	str	r2, [r4, #0]
 8000cf4:	d504      	bpl.n	8000d00 <__sflush_r+0x7c>
 8000cf6:	1c42      	adds	r2, r0, #1
 8000cf8:	d101      	bne.n	8000cfe <__sflush_r+0x7a>
 8000cfa:	682b      	ldr	r3, [r5, #0]
 8000cfc:	b903      	cbnz	r3, 8000d00 <__sflush_r+0x7c>
 8000cfe:	6560      	str	r0, [r4, #84]	; 0x54
 8000d00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d02:	602f      	str	r7, [r5, #0]
 8000d04:	2900      	cmp	r1, #0
 8000d06:	d0ca      	beq.n	8000c9e <__sflush_r+0x1a>
 8000d08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	d002      	beq.n	8000d16 <__sflush_r+0x92>
 8000d10:	4628      	mov	r0, r5
 8000d12:	f000 f9d7 	bl	80010c4 <_free_r>
 8000d16:	2000      	movs	r0, #0
 8000d18:	6360      	str	r0, [r4, #52]	; 0x34
 8000d1a:	e7c1      	b.n	8000ca0 <__sflush_r+0x1c>
 8000d1c:	6a21      	ldr	r1, [r4, #32]
 8000d1e:	2301      	movs	r3, #1
 8000d20:	4628      	mov	r0, r5
 8000d22:	47b0      	blx	r6
 8000d24:	1c41      	adds	r1, r0, #1
 8000d26:	d1c7      	bne.n	8000cb8 <__sflush_r+0x34>
 8000d28:	682b      	ldr	r3, [r5, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0c4      	beq.n	8000cb8 <__sflush_r+0x34>
 8000d2e:	2b1d      	cmp	r3, #29
 8000d30:	d001      	beq.n	8000d36 <__sflush_r+0xb2>
 8000d32:	2b16      	cmp	r3, #22
 8000d34:	d101      	bne.n	8000d3a <__sflush_r+0xb6>
 8000d36:	602f      	str	r7, [r5, #0]
 8000d38:	e7b1      	b.n	8000c9e <__sflush_r+0x1a>
 8000d3a:	89a3      	ldrh	r3, [r4, #12]
 8000d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d40:	81a3      	strh	r3, [r4, #12]
 8000d42:	e7ad      	b.n	8000ca0 <__sflush_r+0x1c>
 8000d44:	690f      	ldr	r7, [r1, #16]
 8000d46:	2f00      	cmp	r7, #0
 8000d48:	d0a9      	beq.n	8000c9e <__sflush_r+0x1a>
 8000d4a:	0793      	lsls	r3, r2, #30
 8000d4c:	680e      	ldr	r6, [r1, #0]
 8000d4e:	bf08      	it	eq
 8000d50:	694b      	ldreq	r3, [r1, #20]
 8000d52:	600f      	str	r7, [r1, #0]
 8000d54:	bf18      	it	ne
 8000d56:	2300      	movne	r3, #0
 8000d58:	eba6 0807 	sub.w	r8, r6, r7
 8000d5c:	608b      	str	r3, [r1, #8]
 8000d5e:	f1b8 0f00 	cmp.w	r8, #0
 8000d62:	dd9c      	ble.n	8000c9e <__sflush_r+0x1a>
 8000d64:	6a21      	ldr	r1, [r4, #32]
 8000d66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000d68:	4643      	mov	r3, r8
 8000d6a:	463a      	mov	r2, r7
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	47b0      	blx	r6
 8000d70:	2800      	cmp	r0, #0
 8000d72:	dc06      	bgt.n	8000d82 <__sflush_r+0xfe>
 8000d74:	89a3      	ldrh	r3, [r4, #12]
 8000d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7a:	81a3      	strh	r3, [r4, #12]
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	e78e      	b.n	8000ca0 <__sflush_r+0x1c>
 8000d82:	4407      	add	r7, r0
 8000d84:	eba8 0800 	sub.w	r8, r8, r0
 8000d88:	e7e9      	b.n	8000d5e <__sflush_r+0xda>
 8000d8a:	bf00      	nop
 8000d8c:	20400001 	.word	0x20400001

08000d90 <_fflush_r>:
 8000d90:	b538      	push	{r3, r4, r5, lr}
 8000d92:	690b      	ldr	r3, [r1, #16]
 8000d94:	4605      	mov	r5, r0
 8000d96:	460c      	mov	r4, r1
 8000d98:	b913      	cbnz	r3, 8000da0 <_fflush_r+0x10>
 8000d9a:	2500      	movs	r5, #0
 8000d9c:	4628      	mov	r0, r5
 8000d9e:	bd38      	pop	{r3, r4, r5, pc}
 8000da0:	b118      	cbz	r0, 8000daa <_fflush_r+0x1a>
 8000da2:	6983      	ldr	r3, [r0, #24]
 8000da4:	b90b      	cbnz	r3, 8000daa <_fflush_r+0x1a>
 8000da6:	f000 f887 	bl	8000eb8 <__sinit>
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <_fflush_r+0x6c>)
 8000dac:	429c      	cmp	r4, r3
 8000dae:	d11b      	bne.n	8000de8 <_fflush_r+0x58>
 8000db0:	686c      	ldr	r4, [r5, #4]
 8000db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0ef      	beq.n	8000d9a <_fflush_r+0xa>
 8000dba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000dbc:	07d0      	lsls	r0, r2, #31
 8000dbe:	d404      	bmi.n	8000dca <_fflush_r+0x3a>
 8000dc0:	0599      	lsls	r1, r3, #22
 8000dc2:	d402      	bmi.n	8000dca <_fflush_r+0x3a>
 8000dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000dc6:	f000 f915 	bl	8000ff4 <__retarget_lock_acquire_recursive>
 8000dca:	4628      	mov	r0, r5
 8000dcc:	4621      	mov	r1, r4
 8000dce:	f7ff ff59 	bl	8000c84 <__sflush_r>
 8000dd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000dd4:	07da      	lsls	r2, r3, #31
 8000dd6:	4605      	mov	r5, r0
 8000dd8:	d4e0      	bmi.n	8000d9c <_fflush_r+0xc>
 8000dda:	89a3      	ldrh	r3, [r4, #12]
 8000ddc:	059b      	lsls	r3, r3, #22
 8000dde:	d4dd      	bmi.n	8000d9c <_fflush_r+0xc>
 8000de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000de2:	f000 f908 	bl	8000ff6 <__retarget_lock_release_recursive>
 8000de6:	e7d9      	b.n	8000d9c <_fflush_r+0xc>
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <_fflush_r+0x70>)
 8000dea:	429c      	cmp	r4, r3
 8000dec:	d101      	bne.n	8000df2 <_fflush_r+0x62>
 8000dee:	68ac      	ldr	r4, [r5, #8]
 8000df0:	e7df      	b.n	8000db2 <_fflush_r+0x22>
 8000df2:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <_fflush_r+0x74>)
 8000df4:	429c      	cmp	r4, r3
 8000df6:	bf08      	it	eq
 8000df8:	68ec      	ldreq	r4, [r5, #12]
 8000dfa:	e7da      	b.n	8000db2 <_fflush_r+0x22>
 8000dfc:	08001498 	.word	0x08001498
 8000e00:	080014b8 	.word	0x080014b8
 8000e04:	08001478 	.word	0x08001478

08000e08 <std>:
 8000e08:	2300      	movs	r3, #0
 8000e0a:	b510      	push	{r4, lr}
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	e9c0 3300 	strd	r3, r3, [r0]
 8000e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e16:	6083      	str	r3, [r0, #8]
 8000e18:	8181      	strh	r1, [r0, #12]
 8000e1a:	6643      	str	r3, [r0, #100]	; 0x64
 8000e1c:	81c2      	strh	r2, [r0, #14]
 8000e1e:	6183      	str	r3, [r0, #24]
 8000e20:	4619      	mov	r1, r3
 8000e22:	2208      	movs	r2, #8
 8000e24:	305c      	adds	r0, #92	; 0x5c
 8000e26:	f7ff fdef 	bl	8000a08 <memset>
 8000e2a:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <std+0x38>)
 8000e2c:	6263      	str	r3, [r4, #36]	; 0x24
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <std+0x3c>)
 8000e30:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <std+0x40>)
 8000e34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <std+0x44>)
 8000e38:	6224      	str	r4, [r4, #32]
 8000e3a:	6323      	str	r3, [r4, #48]	; 0x30
 8000e3c:	bd10      	pop	{r4, pc}
 8000e3e:	bf00      	nop
 8000e40:	080012a5 	.word	0x080012a5
 8000e44:	080012c7 	.word	0x080012c7
 8000e48:	080012ff 	.word	0x080012ff
 8000e4c:	08001323 	.word	0x08001323

08000e50 <_cleanup_r>:
 8000e50:	4901      	ldr	r1, [pc, #4]	; (8000e58 <_cleanup_r+0x8>)
 8000e52:	f000 b8af 	b.w	8000fb4 <_fwalk_reent>
 8000e56:	bf00      	nop
 8000e58:	08000d91 	.word	0x08000d91

08000e5c <__sfmoreglue>:
 8000e5c:	b570      	push	{r4, r5, r6, lr}
 8000e5e:	2268      	movs	r2, #104	; 0x68
 8000e60:	1e4d      	subs	r5, r1, #1
 8000e62:	4355      	muls	r5, r2
 8000e64:	460e      	mov	r6, r1
 8000e66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000e6a:	f000 f997 	bl	800119c <_malloc_r>
 8000e6e:	4604      	mov	r4, r0
 8000e70:	b140      	cbz	r0, 8000e84 <__sfmoreglue+0x28>
 8000e72:	2100      	movs	r1, #0
 8000e74:	e9c0 1600 	strd	r1, r6, [r0]
 8000e78:	300c      	adds	r0, #12
 8000e7a:	60a0      	str	r0, [r4, #8]
 8000e7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000e80:	f7ff fdc2 	bl	8000a08 <memset>
 8000e84:	4620      	mov	r0, r4
 8000e86:	bd70      	pop	{r4, r5, r6, pc}

08000e88 <__sfp_lock_acquire>:
 8000e88:	4801      	ldr	r0, [pc, #4]	; (8000e90 <__sfp_lock_acquire+0x8>)
 8000e8a:	f000 b8b3 	b.w	8000ff4 <__retarget_lock_acquire_recursive>
 8000e8e:	bf00      	nop
 8000e90:	200000dd 	.word	0x200000dd

08000e94 <__sfp_lock_release>:
 8000e94:	4801      	ldr	r0, [pc, #4]	; (8000e9c <__sfp_lock_release+0x8>)
 8000e96:	f000 b8ae 	b.w	8000ff6 <__retarget_lock_release_recursive>
 8000e9a:	bf00      	nop
 8000e9c:	200000dd 	.word	0x200000dd

08000ea0 <__sinit_lock_acquire>:
 8000ea0:	4801      	ldr	r0, [pc, #4]	; (8000ea8 <__sinit_lock_acquire+0x8>)
 8000ea2:	f000 b8a7 	b.w	8000ff4 <__retarget_lock_acquire_recursive>
 8000ea6:	bf00      	nop
 8000ea8:	200000de 	.word	0x200000de

08000eac <__sinit_lock_release>:
 8000eac:	4801      	ldr	r0, [pc, #4]	; (8000eb4 <__sinit_lock_release+0x8>)
 8000eae:	f000 b8a2 	b.w	8000ff6 <__retarget_lock_release_recursive>
 8000eb2:	bf00      	nop
 8000eb4:	200000de 	.word	0x200000de

08000eb8 <__sinit>:
 8000eb8:	b510      	push	{r4, lr}
 8000eba:	4604      	mov	r4, r0
 8000ebc:	f7ff fff0 	bl	8000ea0 <__sinit_lock_acquire>
 8000ec0:	69a3      	ldr	r3, [r4, #24]
 8000ec2:	b11b      	cbz	r3, 8000ecc <__sinit+0x14>
 8000ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ec8:	f7ff bff0 	b.w	8000eac <__sinit_lock_release>
 8000ecc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000ed0:	6523      	str	r3, [r4, #80]	; 0x50
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <__sinit+0x68>)
 8000ed4:	4a13      	ldr	r2, [pc, #76]	; (8000f24 <__sinit+0x6c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	62a2      	str	r2, [r4, #40]	; 0x28
 8000eda:	42a3      	cmp	r3, r4
 8000edc:	bf04      	itt	eq
 8000ede:	2301      	moveq	r3, #1
 8000ee0:	61a3      	streq	r3, [r4, #24]
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	f000 f820 	bl	8000f28 <__sfp>
 8000ee8:	6060      	str	r0, [r4, #4]
 8000eea:	4620      	mov	r0, r4
 8000eec:	f000 f81c 	bl	8000f28 <__sfp>
 8000ef0:	60a0      	str	r0, [r4, #8]
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f000 f818 	bl	8000f28 <__sfp>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60e0      	str	r0, [r4, #12]
 8000efc:	2104      	movs	r1, #4
 8000efe:	6860      	ldr	r0, [r4, #4]
 8000f00:	f7ff ff82 	bl	8000e08 <std>
 8000f04:	68a0      	ldr	r0, [r4, #8]
 8000f06:	2201      	movs	r2, #1
 8000f08:	2109      	movs	r1, #9
 8000f0a:	f7ff ff7d 	bl	8000e08 <std>
 8000f0e:	68e0      	ldr	r0, [r4, #12]
 8000f10:	2202      	movs	r2, #2
 8000f12:	2112      	movs	r1, #18
 8000f14:	f7ff ff78 	bl	8000e08 <std>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61a3      	str	r3, [r4, #24]
 8000f1c:	e7d2      	b.n	8000ec4 <__sinit+0xc>
 8000f1e:	bf00      	nop
 8000f20:	08001474 	.word	0x08001474
 8000f24:	08000e51 	.word	0x08000e51

08000f28 <__sfp>:
 8000f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2a:	4607      	mov	r7, r0
 8000f2c:	f7ff ffac 	bl	8000e88 <__sfp_lock_acquire>
 8000f30:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <__sfp+0x84>)
 8000f32:	681e      	ldr	r6, [r3, #0]
 8000f34:	69b3      	ldr	r3, [r6, #24]
 8000f36:	b913      	cbnz	r3, 8000f3e <__sfp+0x16>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	f7ff ffbd 	bl	8000eb8 <__sinit>
 8000f3e:	3648      	adds	r6, #72	; 0x48
 8000f40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	d503      	bpl.n	8000f50 <__sfp+0x28>
 8000f48:	6833      	ldr	r3, [r6, #0]
 8000f4a:	b30b      	cbz	r3, 8000f90 <__sfp+0x68>
 8000f4c:	6836      	ldr	r6, [r6, #0]
 8000f4e:	e7f7      	b.n	8000f40 <__sfp+0x18>
 8000f50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000f54:	b9d5      	cbnz	r5, 8000f8c <__sfp+0x64>
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <__sfp+0x88>)
 8000f58:	60e3      	str	r3, [r4, #12]
 8000f5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000f5e:	6665      	str	r5, [r4, #100]	; 0x64
 8000f60:	f000 f847 	bl	8000ff2 <__retarget_lock_init_recursive>
 8000f64:	f7ff ff96 	bl	8000e94 <__sfp_lock_release>
 8000f68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f70:	6025      	str	r5, [r4, #0]
 8000f72:	61a5      	str	r5, [r4, #24]
 8000f74:	2208      	movs	r2, #8
 8000f76:	4629      	mov	r1, r5
 8000f78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000f7c:	f7ff fd44 	bl	8000a08 <memset>
 8000f80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000f84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000f88:	4620      	mov	r0, r4
 8000f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f8c:	3468      	adds	r4, #104	; 0x68
 8000f8e:	e7d9      	b.n	8000f44 <__sfp+0x1c>
 8000f90:	2104      	movs	r1, #4
 8000f92:	4638      	mov	r0, r7
 8000f94:	f7ff ff62 	bl	8000e5c <__sfmoreglue>
 8000f98:	4604      	mov	r4, r0
 8000f9a:	6030      	str	r0, [r6, #0]
 8000f9c:	2800      	cmp	r0, #0
 8000f9e:	d1d5      	bne.n	8000f4c <__sfp+0x24>
 8000fa0:	f7ff ff78 	bl	8000e94 <__sfp_lock_release>
 8000fa4:	230c      	movs	r3, #12
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	e7ee      	b.n	8000f88 <__sfp+0x60>
 8000faa:	bf00      	nop
 8000fac:	08001474 	.word	0x08001474
 8000fb0:	ffff0001 	.word	0xffff0001

08000fb4 <_fwalk_reent>:
 8000fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fb8:	4606      	mov	r6, r0
 8000fba:	4688      	mov	r8, r1
 8000fbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000fc0:	2700      	movs	r7, #0
 8000fc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000fc6:	f1b9 0901 	subs.w	r9, r9, #1
 8000fca:	d505      	bpl.n	8000fd8 <_fwalk_reent+0x24>
 8000fcc:	6824      	ldr	r4, [r4, #0]
 8000fce:	2c00      	cmp	r4, #0
 8000fd0:	d1f7      	bne.n	8000fc2 <_fwalk_reent+0xe>
 8000fd2:	4638      	mov	r0, r7
 8000fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fd8:	89ab      	ldrh	r3, [r5, #12]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d907      	bls.n	8000fee <_fwalk_reent+0x3a>
 8000fde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	d003      	beq.n	8000fee <_fwalk_reent+0x3a>
 8000fe6:	4629      	mov	r1, r5
 8000fe8:	4630      	mov	r0, r6
 8000fea:	47c0      	blx	r8
 8000fec:	4307      	orrs	r7, r0
 8000fee:	3568      	adds	r5, #104	; 0x68
 8000ff0:	e7e9      	b.n	8000fc6 <_fwalk_reent+0x12>

08000ff2 <__retarget_lock_init_recursive>:
 8000ff2:	4770      	bx	lr

08000ff4 <__retarget_lock_acquire_recursive>:
 8000ff4:	4770      	bx	lr

08000ff6 <__retarget_lock_release_recursive>:
 8000ff6:	4770      	bx	lr

08000ff8 <__swhatbuf_r>:
 8000ff8:	b570      	push	{r4, r5, r6, lr}
 8000ffa:	460e      	mov	r6, r1
 8000ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001000:	2900      	cmp	r1, #0
 8001002:	b096      	sub	sp, #88	; 0x58
 8001004:	4614      	mov	r4, r2
 8001006:	461d      	mov	r5, r3
 8001008:	da08      	bge.n	800101c <__swhatbuf_r+0x24>
 800100a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800100e:	2200      	movs	r2, #0
 8001010:	602a      	str	r2, [r5, #0]
 8001012:	061a      	lsls	r2, r3, #24
 8001014:	d410      	bmi.n	8001038 <__swhatbuf_r+0x40>
 8001016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800101a:	e00e      	b.n	800103a <__swhatbuf_r+0x42>
 800101c:	466a      	mov	r2, sp
 800101e:	f000 f9a7 	bl	8001370 <_fstat_r>
 8001022:	2800      	cmp	r0, #0
 8001024:	dbf1      	blt.n	800100a <__swhatbuf_r+0x12>
 8001026:	9a01      	ldr	r2, [sp, #4]
 8001028:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800102c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001030:	425a      	negs	r2, r3
 8001032:	415a      	adcs	r2, r3
 8001034:	602a      	str	r2, [r5, #0]
 8001036:	e7ee      	b.n	8001016 <__swhatbuf_r+0x1e>
 8001038:	2340      	movs	r3, #64	; 0x40
 800103a:	2000      	movs	r0, #0
 800103c:	6023      	str	r3, [r4, #0]
 800103e:	b016      	add	sp, #88	; 0x58
 8001040:	bd70      	pop	{r4, r5, r6, pc}
	...

08001044 <__smakebuf_r>:
 8001044:	898b      	ldrh	r3, [r1, #12]
 8001046:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001048:	079d      	lsls	r5, r3, #30
 800104a:	4606      	mov	r6, r0
 800104c:	460c      	mov	r4, r1
 800104e:	d507      	bpl.n	8001060 <__smakebuf_r+0x1c>
 8001050:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001054:	6023      	str	r3, [r4, #0]
 8001056:	6123      	str	r3, [r4, #16]
 8001058:	2301      	movs	r3, #1
 800105a:	6163      	str	r3, [r4, #20]
 800105c:	b002      	add	sp, #8
 800105e:	bd70      	pop	{r4, r5, r6, pc}
 8001060:	ab01      	add	r3, sp, #4
 8001062:	466a      	mov	r2, sp
 8001064:	f7ff ffc8 	bl	8000ff8 <__swhatbuf_r>
 8001068:	9900      	ldr	r1, [sp, #0]
 800106a:	4605      	mov	r5, r0
 800106c:	4630      	mov	r0, r6
 800106e:	f000 f895 	bl	800119c <_malloc_r>
 8001072:	b948      	cbnz	r0, 8001088 <__smakebuf_r+0x44>
 8001074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001078:	059a      	lsls	r2, r3, #22
 800107a:	d4ef      	bmi.n	800105c <__smakebuf_r+0x18>
 800107c:	f023 0303 	bic.w	r3, r3, #3
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	81a3      	strh	r3, [r4, #12]
 8001086:	e7e3      	b.n	8001050 <__smakebuf_r+0xc>
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <__smakebuf_r+0x7c>)
 800108a:	62b3      	str	r3, [r6, #40]	; 0x28
 800108c:	89a3      	ldrh	r3, [r4, #12]
 800108e:	6020      	str	r0, [r4, #0]
 8001090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001094:	81a3      	strh	r3, [r4, #12]
 8001096:	9b00      	ldr	r3, [sp, #0]
 8001098:	6163      	str	r3, [r4, #20]
 800109a:	9b01      	ldr	r3, [sp, #4]
 800109c:	6120      	str	r0, [r4, #16]
 800109e:	b15b      	cbz	r3, 80010b8 <__smakebuf_r+0x74>
 80010a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010a4:	4630      	mov	r0, r6
 80010a6:	f000 f975 	bl	8001394 <_isatty_r>
 80010aa:	b128      	cbz	r0, 80010b8 <__smakebuf_r+0x74>
 80010ac:	89a3      	ldrh	r3, [r4, #12]
 80010ae:	f023 0303 	bic.w	r3, r3, #3
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	81a3      	strh	r3, [r4, #12]
 80010b8:	89a0      	ldrh	r0, [r4, #12]
 80010ba:	4305      	orrs	r5, r0
 80010bc:	81a5      	strh	r5, [r4, #12]
 80010be:	e7cd      	b.n	800105c <__smakebuf_r+0x18>
 80010c0:	08000e51 	.word	0x08000e51

080010c4 <_free_r>:
 80010c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80010c6:	2900      	cmp	r1, #0
 80010c8:	d044      	beq.n	8001154 <_free_r+0x90>
 80010ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010ce:	9001      	str	r0, [sp, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f1a1 0404 	sub.w	r4, r1, #4
 80010d6:	bfb8      	it	lt
 80010d8:	18e4      	addlt	r4, r4, r3
 80010da:	f000 f97d 	bl	80013d8 <__malloc_lock>
 80010de:	4a1e      	ldr	r2, [pc, #120]	; (8001158 <_free_r+0x94>)
 80010e0:	9801      	ldr	r0, [sp, #4]
 80010e2:	6813      	ldr	r3, [r2, #0]
 80010e4:	b933      	cbnz	r3, 80010f4 <_free_r+0x30>
 80010e6:	6063      	str	r3, [r4, #4]
 80010e8:	6014      	str	r4, [r2, #0]
 80010ea:	b003      	add	sp, #12
 80010ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80010f0:	f000 b978 	b.w	80013e4 <__malloc_unlock>
 80010f4:	42a3      	cmp	r3, r4
 80010f6:	d908      	bls.n	800110a <_free_r+0x46>
 80010f8:	6825      	ldr	r5, [r4, #0]
 80010fa:	1961      	adds	r1, r4, r5
 80010fc:	428b      	cmp	r3, r1
 80010fe:	bf01      	itttt	eq
 8001100:	6819      	ldreq	r1, [r3, #0]
 8001102:	685b      	ldreq	r3, [r3, #4]
 8001104:	1949      	addeq	r1, r1, r5
 8001106:	6021      	streq	r1, [r4, #0]
 8001108:	e7ed      	b.n	80010e6 <_free_r+0x22>
 800110a:	461a      	mov	r2, r3
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	b10b      	cbz	r3, 8001114 <_free_r+0x50>
 8001110:	42a3      	cmp	r3, r4
 8001112:	d9fa      	bls.n	800110a <_free_r+0x46>
 8001114:	6811      	ldr	r1, [r2, #0]
 8001116:	1855      	adds	r5, r2, r1
 8001118:	42a5      	cmp	r5, r4
 800111a:	d10b      	bne.n	8001134 <_free_r+0x70>
 800111c:	6824      	ldr	r4, [r4, #0]
 800111e:	4421      	add	r1, r4
 8001120:	1854      	adds	r4, r2, r1
 8001122:	42a3      	cmp	r3, r4
 8001124:	6011      	str	r1, [r2, #0]
 8001126:	d1e0      	bne.n	80010ea <_free_r+0x26>
 8001128:	681c      	ldr	r4, [r3, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	6053      	str	r3, [r2, #4]
 800112e:	4421      	add	r1, r4
 8001130:	6011      	str	r1, [r2, #0]
 8001132:	e7da      	b.n	80010ea <_free_r+0x26>
 8001134:	d902      	bls.n	800113c <_free_r+0x78>
 8001136:	230c      	movs	r3, #12
 8001138:	6003      	str	r3, [r0, #0]
 800113a:	e7d6      	b.n	80010ea <_free_r+0x26>
 800113c:	6825      	ldr	r5, [r4, #0]
 800113e:	1961      	adds	r1, r4, r5
 8001140:	428b      	cmp	r3, r1
 8001142:	bf04      	itt	eq
 8001144:	6819      	ldreq	r1, [r3, #0]
 8001146:	685b      	ldreq	r3, [r3, #4]
 8001148:	6063      	str	r3, [r4, #4]
 800114a:	bf04      	itt	eq
 800114c:	1949      	addeq	r1, r1, r5
 800114e:	6021      	streq	r1, [r4, #0]
 8001150:	6054      	str	r4, [r2, #4]
 8001152:	e7ca      	b.n	80010ea <_free_r+0x26>
 8001154:	b003      	add	sp, #12
 8001156:	bd30      	pop	{r4, r5, pc}
 8001158:	200000e0 	.word	0x200000e0

0800115c <sbrk_aligned>:
 800115c:	b570      	push	{r4, r5, r6, lr}
 800115e:	4e0e      	ldr	r6, [pc, #56]	; (8001198 <sbrk_aligned+0x3c>)
 8001160:	460c      	mov	r4, r1
 8001162:	6831      	ldr	r1, [r6, #0]
 8001164:	4605      	mov	r5, r0
 8001166:	b911      	cbnz	r1, 800116e <sbrk_aligned+0x12>
 8001168:	f000 f88c 	bl	8001284 <_sbrk_r>
 800116c:	6030      	str	r0, [r6, #0]
 800116e:	4621      	mov	r1, r4
 8001170:	4628      	mov	r0, r5
 8001172:	f000 f887 	bl	8001284 <_sbrk_r>
 8001176:	1c43      	adds	r3, r0, #1
 8001178:	d00a      	beq.n	8001190 <sbrk_aligned+0x34>
 800117a:	1cc4      	adds	r4, r0, #3
 800117c:	f024 0403 	bic.w	r4, r4, #3
 8001180:	42a0      	cmp	r0, r4
 8001182:	d007      	beq.n	8001194 <sbrk_aligned+0x38>
 8001184:	1a21      	subs	r1, r4, r0
 8001186:	4628      	mov	r0, r5
 8001188:	f000 f87c 	bl	8001284 <_sbrk_r>
 800118c:	3001      	adds	r0, #1
 800118e:	d101      	bne.n	8001194 <sbrk_aligned+0x38>
 8001190:	f04f 34ff 	mov.w	r4, #4294967295
 8001194:	4620      	mov	r0, r4
 8001196:	bd70      	pop	{r4, r5, r6, pc}
 8001198:	200000e4 	.word	0x200000e4

0800119c <_malloc_r>:
 800119c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011a0:	1ccd      	adds	r5, r1, #3
 80011a2:	f025 0503 	bic.w	r5, r5, #3
 80011a6:	3508      	adds	r5, #8
 80011a8:	2d0c      	cmp	r5, #12
 80011aa:	bf38      	it	cc
 80011ac:	250c      	movcc	r5, #12
 80011ae:	2d00      	cmp	r5, #0
 80011b0:	4607      	mov	r7, r0
 80011b2:	db01      	blt.n	80011b8 <_malloc_r+0x1c>
 80011b4:	42a9      	cmp	r1, r5
 80011b6:	d905      	bls.n	80011c4 <_malloc_r+0x28>
 80011b8:	230c      	movs	r3, #12
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	2600      	movs	r6, #0
 80011be:	4630      	mov	r0, r6
 80011c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011c4:	4e2e      	ldr	r6, [pc, #184]	; (8001280 <_malloc_r+0xe4>)
 80011c6:	f000 f907 	bl	80013d8 <__malloc_lock>
 80011ca:	6833      	ldr	r3, [r6, #0]
 80011cc:	461c      	mov	r4, r3
 80011ce:	bb34      	cbnz	r4, 800121e <_malloc_r+0x82>
 80011d0:	4629      	mov	r1, r5
 80011d2:	4638      	mov	r0, r7
 80011d4:	f7ff ffc2 	bl	800115c <sbrk_aligned>
 80011d8:	1c43      	adds	r3, r0, #1
 80011da:	4604      	mov	r4, r0
 80011dc:	d14d      	bne.n	800127a <_malloc_r+0xde>
 80011de:	6834      	ldr	r4, [r6, #0]
 80011e0:	4626      	mov	r6, r4
 80011e2:	2e00      	cmp	r6, #0
 80011e4:	d140      	bne.n	8001268 <_malloc_r+0xcc>
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	4631      	mov	r1, r6
 80011ea:	4638      	mov	r0, r7
 80011ec:	eb04 0803 	add.w	r8, r4, r3
 80011f0:	f000 f848 	bl	8001284 <_sbrk_r>
 80011f4:	4580      	cmp	r8, r0
 80011f6:	d13a      	bne.n	800126e <_malloc_r+0xd2>
 80011f8:	6821      	ldr	r1, [r4, #0]
 80011fa:	3503      	adds	r5, #3
 80011fc:	1a6d      	subs	r5, r5, r1
 80011fe:	f025 0503 	bic.w	r5, r5, #3
 8001202:	3508      	adds	r5, #8
 8001204:	2d0c      	cmp	r5, #12
 8001206:	bf38      	it	cc
 8001208:	250c      	movcc	r5, #12
 800120a:	4629      	mov	r1, r5
 800120c:	4638      	mov	r0, r7
 800120e:	f7ff ffa5 	bl	800115c <sbrk_aligned>
 8001212:	3001      	adds	r0, #1
 8001214:	d02b      	beq.n	800126e <_malloc_r+0xd2>
 8001216:	6823      	ldr	r3, [r4, #0]
 8001218:	442b      	add	r3, r5
 800121a:	6023      	str	r3, [r4, #0]
 800121c:	e00e      	b.n	800123c <_malloc_r+0xa0>
 800121e:	6822      	ldr	r2, [r4, #0]
 8001220:	1b52      	subs	r2, r2, r5
 8001222:	d41e      	bmi.n	8001262 <_malloc_r+0xc6>
 8001224:	2a0b      	cmp	r2, #11
 8001226:	d916      	bls.n	8001256 <_malloc_r+0xba>
 8001228:	1961      	adds	r1, r4, r5
 800122a:	42a3      	cmp	r3, r4
 800122c:	6025      	str	r5, [r4, #0]
 800122e:	bf18      	it	ne
 8001230:	6059      	strne	r1, [r3, #4]
 8001232:	6863      	ldr	r3, [r4, #4]
 8001234:	bf08      	it	eq
 8001236:	6031      	streq	r1, [r6, #0]
 8001238:	5162      	str	r2, [r4, r5]
 800123a:	604b      	str	r3, [r1, #4]
 800123c:	4638      	mov	r0, r7
 800123e:	f104 060b 	add.w	r6, r4, #11
 8001242:	f000 f8cf 	bl	80013e4 <__malloc_unlock>
 8001246:	f026 0607 	bic.w	r6, r6, #7
 800124a:	1d23      	adds	r3, r4, #4
 800124c:	1af2      	subs	r2, r6, r3
 800124e:	d0b6      	beq.n	80011be <_malloc_r+0x22>
 8001250:	1b9b      	subs	r3, r3, r6
 8001252:	50a3      	str	r3, [r4, r2]
 8001254:	e7b3      	b.n	80011be <_malloc_r+0x22>
 8001256:	6862      	ldr	r2, [r4, #4]
 8001258:	42a3      	cmp	r3, r4
 800125a:	bf0c      	ite	eq
 800125c:	6032      	streq	r2, [r6, #0]
 800125e:	605a      	strne	r2, [r3, #4]
 8001260:	e7ec      	b.n	800123c <_malloc_r+0xa0>
 8001262:	4623      	mov	r3, r4
 8001264:	6864      	ldr	r4, [r4, #4]
 8001266:	e7b2      	b.n	80011ce <_malloc_r+0x32>
 8001268:	4634      	mov	r4, r6
 800126a:	6876      	ldr	r6, [r6, #4]
 800126c:	e7b9      	b.n	80011e2 <_malloc_r+0x46>
 800126e:	230c      	movs	r3, #12
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	4638      	mov	r0, r7
 8001274:	f000 f8b6 	bl	80013e4 <__malloc_unlock>
 8001278:	e7a1      	b.n	80011be <_malloc_r+0x22>
 800127a:	6025      	str	r5, [r4, #0]
 800127c:	e7de      	b.n	800123c <_malloc_r+0xa0>
 800127e:	bf00      	nop
 8001280:	200000e0 	.word	0x200000e0

08001284 <_sbrk_r>:
 8001284:	b538      	push	{r3, r4, r5, lr}
 8001286:	4d06      	ldr	r5, [pc, #24]	; (80012a0 <_sbrk_r+0x1c>)
 8001288:	2300      	movs	r3, #0
 800128a:	4604      	mov	r4, r0
 800128c:	4608      	mov	r0, r1
 800128e:	602b      	str	r3, [r5, #0]
 8001290:	f7ff fb3a 	bl	8000908 <_sbrk>
 8001294:	1c43      	adds	r3, r0, #1
 8001296:	d102      	bne.n	800129e <_sbrk_r+0x1a>
 8001298:	682b      	ldr	r3, [r5, #0]
 800129a:	b103      	cbz	r3, 800129e <_sbrk_r+0x1a>
 800129c:	6023      	str	r3, [r4, #0]
 800129e:	bd38      	pop	{r3, r4, r5, pc}
 80012a0:	200000e8 	.word	0x200000e8

080012a4 <__sread>:
 80012a4:	b510      	push	{r4, lr}
 80012a6:	460c      	mov	r4, r1
 80012a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012ac:	f000 f8a0 	bl	80013f0 <_read_r>
 80012b0:	2800      	cmp	r0, #0
 80012b2:	bfab      	itete	ge
 80012b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80012b6:	89a3      	ldrhlt	r3, [r4, #12]
 80012b8:	181b      	addge	r3, r3, r0
 80012ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80012be:	bfac      	ite	ge
 80012c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80012c2:	81a3      	strhlt	r3, [r4, #12]
 80012c4:	bd10      	pop	{r4, pc}

080012c6 <__swrite>:
 80012c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ca:	461f      	mov	r7, r3
 80012cc:	898b      	ldrh	r3, [r1, #12]
 80012ce:	05db      	lsls	r3, r3, #23
 80012d0:	4605      	mov	r5, r0
 80012d2:	460c      	mov	r4, r1
 80012d4:	4616      	mov	r6, r2
 80012d6:	d505      	bpl.n	80012e4 <__swrite+0x1e>
 80012d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012dc:	2302      	movs	r3, #2
 80012de:	2200      	movs	r2, #0
 80012e0:	f000 f868 	bl	80013b4 <_lseek_r>
 80012e4:	89a3      	ldrh	r3, [r4, #12]
 80012e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012ee:	81a3      	strh	r3, [r4, #12]
 80012f0:	4632      	mov	r2, r6
 80012f2:	463b      	mov	r3, r7
 80012f4:	4628      	mov	r0, r5
 80012f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012fa:	f000 b817 	b.w	800132c <_write_r>

080012fe <__sseek>:
 80012fe:	b510      	push	{r4, lr}
 8001300:	460c      	mov	r4, r1
 8001302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001306:	f000 f855 	bl	80013b4 <_lseek_r>
 800130a:	1c43      	adds	r3, r0, #1
 800130c:	89a3      	ldrh	r3, [r4, #12]
 800130e:	bf15      	itete	ne
 8001310:	6560      	strne	r0, [r4, #84]	; 0x54
 8001312:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001316:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800131a:	81a3      	strheq	r3, [r4, #12]
 800131c:	bf18      	it	ne
 800131e:	81a3      	strhne	r3, [r4, #12]
 8001320:	bd10      	pop	{r4, pc}

08001322 <__sclose>:
 8001322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001326:	f000 b813 	b.w	8001350 <_close_r>
	...

0800132c <_write_r>:
 800132c:	b538      	push	{r3, r4, r5, lr}
 800132e:	4d07      	ldr	r5, [pc, #28]	; (800134c <_write_r+0x20>)
 8001330:	4604      	mov	r4, r0
 8001332:	4608      	mov	r0, r1
 8001334:	4611      	mov	r1, r2
 8001336:	2200      	movs	r2, #0
 8001338:	602a      	str	r2, [r5, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	f7ff fa93 	bl	8000866 <_write>
 8001340:	1c43      	adds	r3, r0, #1
 8001342:	d102      	bne.n	800134a <_write_r+0x1e>
 8001344:	682b      	ldr	r3, [r5, #0]
 8001346:	b103      	cbz	r3, 800134a <_write_r+0x1e>
 8001348:	6023      	str	r3, [r4, #0]
 800134a:	bd38      	pop	{r3, r4, r5, pc}
 800134c:	200000e8 	.word	0x200000e8

08001350 <_close_r>:
 8001350:	b538      	push	{r3, r4, r5, lr}
 8001352:	4d06      	ldr	r5, [pc, #24]	; (800136c <_close_r+0x1c>)
 8001354:	2300      	movs	r3, #0
 8001356:	4604      	mov	r4, r0
 8001358:	4608      	mov	r0, r1
 800135a:	602b      	str	r3, [r5, #0]
 800135c:	f7ff fa9f 	bl	800089e <_close>
 8001360:	1c43      	adds	r3, r0, #1
 8001362:	d102      	bne.n	800136a <_close_r+0x1a>
 8001364:	682b      	ldr	r3, [r5, #0]
 8001366:	b103      	cbz	r3, 800136a <_close_r+0x1a>
 8001368:	6023      	str	r3, [r4, #0]
 800136a:	bd38      	pop	{r3, r4, r5, pc}
 800136c:	200000e8 	.word	0x200000e8

08001370 <_fstat_r>:
 8001370:	b538      	push	{r3, r4, r5, lr}
 8001372:	4d07      	ldr	r5, [pc, #28]	; (8001390 <_fstat_r+0x20>)
 8001374:	2300      	movs	r3, #0
 8001376:	4604      	mov	r4, r0
 8001378:	4608      	mov	r0, r1
 800137a:	4611      	mov	r1, r2
 800137c:	602b      	str	r3, [r5, #0]
 800137e:	f7ff fa9a 	bl	80008b6 <_fstat>
 8001382:	1c43      	adds	r3, r0, #1
 8001384:	d102      	bne.n	800138c <_fstat_r+0x1c>
 8001386:	682b      	ldr	r3, [r5, #0]
 8001388:	b103      	cbz	r3, 800138c <_fstat_r+0x1c>
 800138a:	6023      	str	r3, [r4, #0]
 800138c:	bd38      	pop	{r3, r4, r5, pc}
 800138e:	bf00      	nop
 8001390:	200000e8 	.word	0x200000e8

08001394 <_isatty_r>:
 8001394:	b538      	push	{r3, r4, r5, lr}
 8001396:	4d06      	ldr	r5, [pc, #24]	; (80013b0 <_isatty_r+0x1c>)
 8001398:	2300      	movs	r3, #0
 800139a:	4604      	mov	r4, r0
 800139c:	4608      	mov	r0, r1
 800139e:	602b      	str	r3, [r5, #0]
 80013a0:	f7ff fa99 	bl	80008d6 <_isatty>
 80013a4:	1c43      	adds	r3, r0, #1
 80013a6:	d102      	bne.n	80013ae <_isatty_r+0x1a>
 80013a8:	682b      	ldr	r3, [r5, #0]
 80013aa:	b103      	cbz	r3, 80013ae <_isatty_r+0x1a>
 80013ac:	6023      	str	r3, [r4, #0]
 80013ae:	bd38      	pop	{r3, r4, r5, pc}
 80013b0:	200000e8 	.word	0x200000e8

080013b4 <_lseek_r>:
 80013b4:	b538      	push	{r3, r4, r5, lr}
 80013b6:	4d07      	ldr	r5, [pc, #28]	; (80013d4 <_lseek_r+0x20>)
 80013b8:	4604      	mov	r4, r0
 80013ba:	4608      	mov	r0, r1
 80013bc:	4611      	mov	r1, r2
 80013be:	2200      	movs	r2, #0
 80013c0:	602a      	str	r2, [r5, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	f7ff fa92 	bl	80008ec <_lseek>
 80013c8:	1c43      	adds	r3, r0, #1
 80013ca:	d102      	bne.n	80013d2 <_lseek_r+0x1e>
 80013cc:	682b      	ldr	r3, [r5, #0]
 80013ce:	b103      	cbz	r3, 80013d2 <_lseek_r+0x1e>
 80013d0:	6023      	str	r3, [r4, #0]
 80013d2:	bd38      	pop	{r3, r4, r5, pc}
 80013d4:	200000e8 	.word	0x200000e8

080013d8 <__malloc_lock>:
 80013d8:	4801      	ldr	r0, [pc, #4]	; (80013e0 <__malloc_lock+0x8>)
 80013da:	f7ff be0b 	b.w	8000ff4 <__retarget_lock_acquire_recursive>
 80013de:	bf00      	nop
 80013e0:	200000dc 	.word	0x200000dc

080013e4 <__malloc_unlock>:
 80013e4:	4801      	ldr	r0, [pc, #4]	; (80013ec <__malloc_unlock+0x8>)
 80013e6:	f7ff be06 	b.w	8000ff6 <__retarget_lock_release_recursive>
 80013ea:	bf00      	nop
 80013ec:	200000dc 	.word	0x200000dc

080013f0 <_read_r>:
 80013f0:	b538      	push	{r3, r4, r5, lr}
 80013f2:	4d07      	ldr	r5, [pc, #28]	; (8001410 <_read_r+0x20>)
 80013f4:	4604      	mov	r4, r0
 80013f6:	4608      	mov	r0, r1
 80013f8:	4611      	mov	r1, r2
 80013fa:	2200      	movs	r2, #0
 80013fc:	602a      	str	r2, [r5, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	f7ff fa14 	bl	800082c <_read>
 8001404:	1c43      	adds	r3, r0, #1
 8001406:	d102      	bne.n	800140e <_read_r+0x1e>
 8001408:	682b      	ldr	r3, [r5, #0]
 800140a:	b103      	cbz	r3, 800140e <_read_r+0x1e>
 800140c:	6023      	str	r3, [r4, #0]
 800140e:	bd38      	pop	{r3, r4, r5, pc}
 8001410:	200000e8 	.word	0x200000e8

08001414 <_init>:
 8001414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001416:	bf00      	nop
 8001418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800141a:	bc08      	pop	{r3}
 800141c:	469e      	mov	lr, r3
 800141e:	4770      	bx	lr

08001420 <_fini>:
 8001420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001422:	bf00      	nop
 8001424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001426:	bc08      	pop	{r3}
 8001428:	469e      	mov	lr, r3
 800142a:	4770      	bx	lr
