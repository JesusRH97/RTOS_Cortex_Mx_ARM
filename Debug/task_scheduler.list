
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e38  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08000fe0  08000fe0  00010fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010d4  080010d4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080010d4  080010d4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010d4  080010d4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010d4  080010d4  000110d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010d8  080010d8  000110d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080010dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000074  08001150  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08001150  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000231a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000656  00000000  00000000  000223be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000198  00000000  00000000  00022a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000160  00000000  00000000  00022bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002afe  00000000  00000000  00022d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000142d  00000000  00000000  0002580e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000094c4  00000000  00000000  00026c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000300ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000af8  00000000  00000000  0003017c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000074 	.word	0x20000074
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000fc8 	.word	0x08000fc8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000078 	.word	0x20000078
 80001e4:	08000fc8 	.word	0x08000fc8

080001e8 <main>:
uint32_t pspOfTasks[MAX_TASKS] = {T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START};
uint32_t taskHandlers[MAX_TASKS];
uint8_t currentTask;

int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	printf("Main\n");
 80001ec:	480f      	ldr	r0, [pc, #60]	; (800022c <main+0x44>)
 80001ee:	f000 fadf 	bl	80007b0 <puts>
	RTOS_enableProcessorFaults();
 80001f2:	f000 f92b 	bl	800044c <RTOS_enableProcessorFaults>
	taskHandlers[0] = (uint32_t) RTOS_task1Handler;
 80001f6:	4a0e      	ldr	r2, [pc, #56]	; (8000230 <main+0x48>)
 80001f8:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <main+0x4c>)
 80001fa:	601a      	str	r2, [r3, #0]
	taskHandlers[1] = (uint32_t) RTOS_task2Handler;
 80001fc:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <main+0x50>)
 80001fe:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <main+0x4c>)
 8000200:	605a      	str	r2, [r3, #4]
	taskHandlers[2] = (uint32_t) RTOS_task3Handler;
 8000202:	4a0e      	ldr	r2, [pc, #56]	; (800023c <main+0x54>)
 8000204:	4b0b      	ldr	r3, [pc, #44]	; (8000234 <main+0x4c>)
 8000206:	609a      	str	r2, [r3, #8]
	taskHandlers[3] = (uint32_t) RTOS_task4Handler;
 8000208:	4a0d      	ldr	r2, [pc, #52]	; (8000240 <main+0x58>)
 800020a:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <main+0x4c>)
 800020c:	60da      	str	r2, [r3, #12]
	RTOS_initSchedulerStack(SCHED_STACK_START);
 800020e:	480d      	ldr	r0, [pc, #52]	; (8000244 <main+0x5c>)
 8000210:	f000 f870 	bl	80002f4 <RTOS_initSchedulerStack>
	RTOS_initSystickTimer(TICK_HZ);
 8000214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000218:	f000 f836 	bl	8000288 <RTOS_initSystickTimer>
	RTOS_switchToPsp();
 800021c:	f000 f8ae 	bl	800037c <RTOS_switchToPsp>
	RTOS_initTasksStack();
 8000220:	f000 f8ba 	bl	8000398 <RTOS_initTasksStack>
	/* Start from first task */
	RTOS_task1Handler();
 8000224:	f000 f810 	bl	8000248 <RTOS_task1Handler>
	for(;;);
 8000228:	e7fe      	b.n	8000228 <main+0x40>
 800022a:	bf00      	nop
 800022c:	08000fe0 	.word	0x08000fe0
 8000230:	08000249 	.word	0x08000249
 8000234:	200000a0 	.word	0x200000a0
 8000238:	08000259 	.word	0x08000259
 800023c:	08000269 	.word	0x08000269
 8000240:	08000279 	.word	0x08000279
 8000244:	2001ec00 	.word	0x2001ec00

08000248 <RTOS_task1Handler>:
}

void RTOS_task1Handler(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	printf("Running task 1\n");
 800024c:	4801      	ldr	r0, [pc, #4]	; (8000254 <RTOS_task1Handler+0xc>)
 800024e:	f000 faaf 	bl	80007b0 <puts>
	while(1)
 8000252:	e7fe      	b.n	8000252 <RTOS_task1Handler+0xa>
 8000254:	08000fe8 	.word	0x08000fe8

08000258 <RTOS_task2Handler>:

	}
}

void RTOS_task2Handler(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	printf("Running task 2\n");
 800025c:	4801      	ldr	r0, [pc, #4]	; (8000264 <RTOS_task2Handler+0xc>)
 800025e:	f000 faa7 	bl	80007b0 <puts>
	while(1)
 8000262:	e7fe      	b.n	8000262 <RTOS_task2Handler+0xa>
 8000264:	08000ff8 	.word	0x08000ff8

08000268 <RTOS_task3Handler>:

	}
}

void RTOS_task3Handler(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	printf("Running task 3\n");
 800026c:	4801      	ldr	r0, [pc, #4]	; (8000274 <RTOS_task3Handler+0xc>)
 800026e:	f000 fa9f 	bl	80007b0 <puts>
	while(1)
 8000272:	e7fe      	b.n	8000272 <RTOS_task3Handler+0xa>
 8000274:	08001008 	.word	0x08001008

08000278 <RTOS_task4Handler>:

	}
}

void RTOS_task4Handler(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	printf("Running task 4\n");
 800027c:	4801      	ldr	r0, [pc, #4]	; (8000284 <RTOS_task4Handler+0xc>)
 800027e:	f000 fa97 	bl	80007b0 <puts>
	while(1)
 8000282:	e7fe      	b.n	8000282 <RTOS_task4Handler+0xa>
 8000284:	08001018 	.word	0x08001018

08000288 <RTOS_initSystickTimer>:

	}
}

void RTOS_initSystickTimer(uint32_t tick_hz)
{
 8000288:	b480      	push	{r7}
 800028a:	b087      	sub	sp, #28
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*) 0xE000E014;
 8000290:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <RTOS_initSystickTimer+0x60>)
 8000292:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*) 0xE000E010;
 8000294:	4b15      	ldr	r3, [pc, #84]	; (80002ec <RTOS_initSystickTimer+0x64>)
 8000296:	613b      	str	r3, [r7, #16]
    /* Calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz) - 1;
 8000298:	4a15      	ldr	r2, [pc, #84]	; (80002f0 <RTOS_initSystickTimer+0x68>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a0:	3b01      	subs	r3, #1
 80002a2:	60fb      	str	r3, [r7, #12]
    /* Clear the value of SVR */
    *pSRVR &= ~(0x00FFFFFFFF);
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
    /* Load the value in to SVR */
    *pSRVR |= count_value;
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	431a      	orrs	r2, r3
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	601a      	str	r2, [r3, #0]
    /* Do some settings */
    *pSCSR |= ( 1 << 1);  //Enables SysTick exception request:
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f043 0202 	orr.w	r2, r3, #2
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80002c2:	693b      	ldr	r3, [r7, #16]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 0204 	orr.w	r2, r3, #4
 80002ca:	693b      	ldr	r3, [r7, #16]
 80002cc:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 0);  //enables the counter
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f043 0201 	orr.w	r2, r3, #1
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	601a      	str	r2, [r3, #0]
}
 80002da:	bf00      	nop
 80002dc:	371c      	adds	r7, #28
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000e014 	.word	0xe000e014
 80002ec:	e000e010 	.word	0xe000e010
 80002f0:	00f42400 	.word	0x00f42400

080002f4 <RTOS_initSchedulerStack>:

__attribute__((naked)) void RTOS_initSchedulerStack(uint32_t sched_top_of_stack)
{
 80002f4:	4603      	mov	r3, r0
     __asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  :   );
 80002f6:	f383 8808 	msr	MSP, r3
     __asm volatile("BX LR");
 80002fa:	4770      	bx	lr
}
 80002fc:	bf00      	nop
	...

08000300 <RTOS_getPspValue>:

uint32_t RTOS_getPspValue(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
	return pspOfTasks[currentTask];
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <RTOS_getPspValue+0x1c>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	461a      	mov	r2, r3
 800030a:	4b05      	ldr	r3, [pc, #20]	; (8000320 <RTOS_getPspValue+0x20>)
 800030c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8000310:	4618      	mov	r0, r3
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	2000009c 	.word	0x2000009c
 8000320:	20000000 	.word	0x20000000

08000324 <RTOS_setPspValue>:

void RTOS_setPspValue(uint32_t currentPspAddress)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	pspOfTasks[currentTask] = currentPspAddress;
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <RTOS_setPspValue+0x24>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	4619      	mov	r1, r3
 8000332:	4a06      	ldr	r2, [pc, #24]	; (800034c <RTOS_setPspValue+0x28>)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	2000009c 	.word	0x2000009c
 800034c:	20000000 	.word	0x20000000

08000350 <RTOS_updateNextTask>:

void RTOS_updateNextTask(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
	/* Round Robin algorithm */
	currentTask++;
 8000354:	4b08      	ldr	r3, [pc, #32]	; (8000378 <RTOS_updateNextTask+0x28>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	3301      	adds	r3, #1
 800035a:	b2da      	uxtb	r2, r3
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <RTOS_updateNextTask+0x28>)
 800035e:	701a      	strb	r2, [r3, #0]
	currentTask %= MAX_TASKS;
 8000360:	4b05      	ldr	r3, [pc, #20]	; (8000378 <RTOS_updateNextTask+0x28>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	f003 0303 	and.w	r3, r3, #3
 8000368:	b2da      	uxtb	r2, r3
 800036a:	4b03      	ldr	r3, [pc, #12]	; (8000378 <RTOS_updateNextTask+0x28>)
 800036c:	701a      	strb	r2, [r3, #0]
}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	2000009c 	.word	0x2000009c

0800037c <RTOS_switchToPsp>:

__attribute__((naked)) void RTOS_switchToPsp(void)
{
	/* Save original LR */
	__asm volatile("PUSH {LR}");
 800037c:	b500      	push	{lr}
	__asm volatile("BL RTOS_getPspValue");
 800037e:	f7ff ffbf 	bl	8000300 <RTOS_getPspValue>
	__asm volatile("MSR PSP, R0");
 8000382:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 8000386:	f85d eb04 	ldr.w	lr, [sp], #4
	/* Make PSP as default SP */
	__asm volatile("MOV R0, #0X02");
 800038a:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0");
 800038e:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 8000392:	4770      	bx	lr
}
 8000394:	bf00      	nop
	...

08000398 <RTOS_initTasksStack>:

void RTOS_initTasksStack(void)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
	uint32_t* pPSP;
	for (uint8_t iTask = 0; iTask < MAX_TASKS; iTask++)
 800039e:	2300      	movs	r3, #0
 80003a0:	70fb      	strb	r3, [r7, #3]
 80003a2:	e032      	b.n	800040a <RTOS_initTasksStack+0x72>
	{
		pPSP = (uint32_t*) pspOfTasks[iTask];
 80003a4:	78fb      	ldrb	r3, [r7, #3]
 80003a6:	4a1d      	ldr	r2, [pc, #116]	; (800041c <RTOS_initTasksStack+0x84>)
 80003a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ac:	607b      	str	r3, [r7, #4]
		/* Stack model full descending */
		pPSP--;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	3b04      	subs	r3, #4
 80003b2:	607b      	str	r3, [r7, #4]
		*pPSP = XPSR_VALUE;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80003ba:	601a      	str	r2, [r3, #0]
		pPSP--;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3b04      	subs	r3, #4
 80003c0:	607b      	str	r3, [r7, #4]
		*pPSP = (uint32_t) taskHandlers[iTask];
 80003c2:	78fb      	ldrb	r3, [r7, #3]
 80003c4:	4a16      	ldr	r2, [pc, #88]	; (8000420 <RTOS_initTasksStack+0x88>)
 80003c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	601a      	str	r2, [r3, #0]
		pPSP--;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3b04      	subs	r3, #4
 80003d2:	607b      	str	r3, [r7, #4]
		*pPSP = LR_VALUE;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	f06f 0202 	mvn.w	r2, #2
 80003da:	601a      	str	r2, [r3, #0]

		for (uint8_t iRx = 0; iRx < MAX_CORE_REGISTERS; iRx++)
 80003dc:	2300      	movs	r3, #0
 80003de:	70bb      	strb	r3, [r7, #2]
 80003e0:	e008      	b.n	80003f4 <RTOS_initTasksStack+0x5c>
		{
			pPSP--;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	3b04      	subs	r3, #4
 80003e6:	607b      	str	r3, [r7, #4]
			*pPSP = RX_DUMMY_FRAME_VALUE;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
		for (uint8_t iRx = 0; iRx < MAX_CORE_REGISTERS; iRx++)
 80003ee:	78bb      	ldrb	r3, [r7, #2]
 80003f0:	3301      	adds	r3, #1
 80003f2:	70bb      	strb	r3, [r7, #2]
 80003f4:	78bb      	ldrb	r3, [r7, #2]
 80003f6:	2b0c      	cmp	r3, #12
 80003f8:	d9f3      	bls.n	80003e2 <RTOS_initTasksStack+0x4a>
		}
		/* Store the final value of PSP for each task to return them later */
		pspOfTasks[iTask] = (uint32_t) pPSP;
 80003fa:	78fb      	ldrb	r3, [r7, #3]
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	4907      	ldr	r1, [pc, #28]	; (800041c <RTOS_initTasksStack+0x84>)
 8000400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint8_t iTask = 0; iTask < MAX_TASKS; iTask++)
 8000404:	78fb      	ldrb	r3, [r7, #3]
 8000406:	3301      	adds	r3, #1
 8000408:	70fb      	strb	r3, [r7, #3]
 800040a:	78fb      	ldrb	r3, [r7, #3]
 800040c:	2b03      	cmp	r3, #3
 800040e:	d9c9      	bls.n	80003a4 <RTOS_initTasksStack+0xc>
	}
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	20000000 	.word	0x20000000
 8000420:	200000a0 	.word	0x200000a0

08000424 <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler(void)
{
	/* Save the context of current task */
	__asm volatile("MRS R0, PSP");
 8000424:	f3ef 8009 	mrs	r0, PSP
	__asm volatile("STMDB R0!, {R4-R11}");
 8000428:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	/* Save original LR */
	__asm volatile("PUSH {LR}");
 800042c:	b500      	push	{lr}
	__asm volatile("BL RTOS_setPspValue");
 800042e:	f7ff ff79 	bl	8000324 <RTOS_setPspValue>
	/* Retrieve the context of next task */
	__asm volatile("BL RTOS_updateNextTask");
 8000432:	f7ff ff8d 	bl	8000350 <RTOS_updateNextTask>
	__asm volatile("BL RTOS_getPspValue");
 8000436:	f7ff ff63 	bl	8000300 <RTOS_getPspValue>
	__asm volatile("LDMIA R0!, {R4-R11}");
 800043a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("MSR PSP, R0");
 800043e:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 8000442:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 8000446:	4770      	bx	lr
}
 8000448:	bf00      	nop
	...

0800044c <RTOS_enableProcessorFaults>:

void RTOS_enableProcessorFaults(void)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 8000452:	4b0d      	ldr	r3, [pc, #52]	; (8000488 <RTOS_enableProcessorFaults+0x3c>)
 8000454:	607b      	str	r3, [r7, #4]
	*pSHCSR |= ( 1 << 16);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	601a      	str	r2, [r3, #0]
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	e000ed24 	.word	0xe000ed24

0800048c <HardFault_Handler>:

void HardFault_Handler(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 8000490:	4801      	ldr	r0, [pc, #4]	; (8000498 <HardFault_Handler+0xc>)
 8000492:	f000 f98d 	bl	80007b0 <puts>
	while(1);
 8000496:	e7fe      	b.n	8000496 <HardFault_Handler+0xa>
 8000498:	08001028 	.word	0x08001028

0800049c <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 80004a0:	4801      	ldr	r0, [pc, #4]	; (80004a8 <MemManage_Handler+0xc>)
 80004a2:	f000 f985 	bl	80007b0 <puts>
	while(1);
 80004a6:	e7fe      	b.n	80004a6 <MemManage_Handler+0xa>
 80004a8:	08001040 	.word	0x08001040

080004ac <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 80004b0:	4801      	ldr	r0, [pc, #4]	; (80004b8 <BusFault_Handler+0xc>)
 80004b2:	f000 f97d 	bl	80007b0 <puts>
	while(1);
 80004b6:	e7fe      	b.n	80004b6 <BusFault_Handler+0xa>
 80004b8:	08001058 	.word	0x08001058

080004bc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <ITM_SendChar+0x48>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a0e      	ldr	r2, [pc, #56]	; (8000504 <ITM_SendChar+0x48>)
 80004cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004d0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004d2:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <ITM_SendChar+0x4c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a0c      	ldr	r2, [pc, #48]	; (8000508 <ITM_SendChar+0x4c>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004de:	bf00      	nop
 80004e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d0f8      	beq.n	80004e0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	6013      	str	r3, [r2, #0]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	e000edfc 	.word	0xe000edfc
 8000508:	e0000e00 	.word	0xe0000e00

0800050c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	e00a      	b.n	8000534 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800051e:	f3af 8000 	nop.w
 8000522:	4601      	mov	r1, r0
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	1c5a      	adds	r2, r3, #1
 8000528:	60ba      	str	r2, [r7, #8]
 800052a:	b2ca      	uxtb	r2, r1
 800052c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	3301      	adds	r3, #1
 8000532:	617b      	str	r3, [r7, #20]
 8000534:	697a      	ldr	r2, [r7, #20]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	429a      	cmp	r2, r3
 800053a:	dbf0      	blt.n	800051e <_read+0x12>
	}

return len;
 800053c:	687b      	ldr	r3, [r7, #4]
}
 800053e:	4618      	mov	r0, r3
 8000540:	3718      	adds	r7, #24
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b086      	sub	sp, #24
 800054a:	af00      	add	r7, sp, #0
 800054c:	60f8      	str	r0, [r7, #12]
 800054e:	60b9      	str	r1, [r7, #8]
 8000550:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	e009      	b.n	800056c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	1c5a      	adds	r2, r3, #1
 800055c:	60ba      	str	r2, [r7, #8]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ffab 	bl	80004bc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	3301      	adds	r3, #1
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	697a      	ldr	r2, [r7, #20]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	429a      	cmp	r2, r3
 8000572:	dbf1      	blt.n	8000558 <_write+0x12>
	}
	return len;
 8000574:	687b      	ldr	r3, [r7, #4]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <_close>:

int _close(int file)
{
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
	return -1;
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
}
 800058a:	4618      	mov	r0, r3
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000596:	b480      	push	{r7}
 8000598:	b083      	sub	sp, #12
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
 800059e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005a6:	605a      	str	r2, [r3, #4]
	return 0;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <_isatty>:

int _isatty(int file)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
	return 1;
 80005be:	2301      	movs	r3, #1
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
	return 0;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <_sbrk+0x50>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d102      	bne.n	80005fe <_sbrk+0x16>
		heap_end = &end;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <_sbrk+0x50>)
 80005fa:	4a10      	ldr	r2, [pc, #64]	; (800063c <_sbrk+0x54>)
 80005fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <_sbrk+0x50>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <_sbrk+0x50>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	466a      	mov	r2, sp
 800060e:	4293      	cmp	r3, r2
 8000610:	d907      	bls.n	8000622 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000612:	f000 f83f 	bl	8000694 <__errno>
 8000616:	4602      	mov	r2, r0
 8000618:	230c      	movs	r3, #12
 800061a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	e006      	b.n	8000630 <_sbrk+0x48>
	}

	heap_end += incr;
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <_sbrk+0x50>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	4a03      	ldr	r2, [pc, #12]	; (8000638 <_sbrk+0x50>)
 800062c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800062e:	68fb      	ldr	r3, [r7, #12]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000090 	.word	0x20000090
 800063c:	200000b8 	.word	0x200000b8

08000640 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000642:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <LoopForever+0x6>)
  ldr r1, =_edata
 8000646:	490e      	ldr	r1, [pc, #56]	; (8000680 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000648:	4a0e      	ldr	r2, [pc, #56]	; (8000684 <LoopForever+0xe>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800064c:	e002      	b.n	8000654 <LoopCopyDataInit>

0800064e <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 800064e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000652:	3304      	adds	r3, #4

08000654 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000656:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000658:	d3f9      	bcc.n	800064e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065a:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <LoopForever+0x12>)
  ldr r4, =_ebss
 800065c:	4c0b      	ldr	r4, [pc, #44]	; (800068c <LoopForever+0x16>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000660:	e001      	b.n	8000666 <LoopFillZerobss>

08000662 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000664:	3204      	adds	r2, #4

08000666 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000668:	d3fb      	bcc.n	8000662 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800066a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800066e:	f000 f817 	bl	80006a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000672:	f7ff fdb9 	bl	80001e8 <main>

08000676 <LoopForever>:

LoopForever:
    b LoopForever
 8000676:	e7fe      	b.n	8000676 <LoopForever>
  ldr   r0, =_estack
 8000678:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800067c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000680:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000684:	080010dc 	.word	0x080010dc
  ldr r2, =_sbss
 8000688:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800068c:	200000b4 	.word	0x200000b4

08000690 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000690:	e7fe      	b.n	8000690 <ADC_IRQHandler>
	...

08000694 <__errno>:
 8000694:	4b01      	ldr	r3, [pc, #4]	; (800069c <__errno+0x8>)
 8000696:	6818      	ldr	r0, [r3, #0]
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000010 	.word	0x20000010

080006a0 <__libc_init_array>:
 80006a0:	b570      	push	{r4, r5, r6, lr}
 80006a2:	4e0d      	ldr	r6, [pc, #52]	; (80006d8 <__libc_init_array+0x38>)
 80006a4:	4c0d      	ldr	r4, [pc, #52]	; (80006dc <__libc_init_array+0x3c>)
 80006a6:	1ba4      	subs	r4, r4, r6
 80006a8:	10a4      	asrs	r4, r4, #2
 80006aa:	2500      	movs	r5, #0
 80006ac:	42a5      	cmp	r5, r4
 80006ae:	d109      	bne.n	80006c4 <__libc_init_array+0x24>
 80006b0:	4e0b      	ldr	r6, [pc, #44]	; (80006e0 <__libc_init_array+0x40>)
 80006b2:	4c0c      	ldr	r4, [pc, #48]	; (80006e4 <__libc_init_array+0x44>)
 80006b4:	f000 fc88 	bl	8000fc8 <_init>
 80006b8:	1ba4      	subs	r4, r4, r6
 80006ba:	10a4      	asrs	r4, r4, #2
 80006bc:	2500      	movs	r5, #0
 80006be:	42a5      	cmp	r5, r4
 80006c0:	d105      	bne.n	80006ce <__libc_init_array+0x2e>
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006c8:	4798      	blx	r3
 80006ca:	3501      	adds	r5, #1
 80006cc:	e7ee      	b.n	80006ac <__libc_init_array+0xc>
 80006ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006d2:	4798      	blx	r3
 80006d4:	3501      	adds	r5, #1
 80006d6:	e7f2      	b.n	80006be <__libc_init_array+0x1e>
 80006d8:	080010d4 	.word	0x080010d4
 80006dc:	080010d4 	.word	0x080010d4
 80006e0:	080010d4 	.word	0x080010d4
 80006e4:	080010d8 	.word	0x080010d8

080006e8 <memset>:
 80006e8:	4402      	add	r2, r0
 80006ea:	4603      	mov	r3, r0
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d100      	bne.n	80006f2 <memset+0xa>
 80006f0:	4770      	bx	lr
 80006f2:	f803 1b01 	strb.w	r1, [r3], #1
 80006f6:	e7f9      	b.n	80006ec <memset+0x4>

080006f8 <_puts_r>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	460e      	mov	r6, r1
 80006fc:	4605      	mov	r5, r0
 80006fe:	b118      	cbz	r0, 8000708 <_puts_r+0x10>
 8000700:	6983      	ldr	r3, [r0, #24]
 8000702:	b90b      	cbnz	r3, 8000708 <_puts_r+0x10>
 8000704:	f000 fa0c 	bl	8000b20 <__sinit>
 8000708:	69ab      	ldr	r3, [r5, #24]
 800070a:	68ac      	ldr	r4, [r5, #8]
 800070c:	b913      	cbnz	r3, 8000714 <_puts_r+0x1c>
 800070e:	4628      	mov	r0, r5
 8000710:	f000 fa06 	bl	8000b20 <__sinit>
 8000714:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <_puts_r+0xac>)
 8000716:	429c      	cmp	r4, r3
 8000718:	d117      	bne.n	800074a <_puts_r+0x52>
 800071a:	686c      	ldr	r4, [r5, #4]
 800071c:	89a3      	ldrh	r3, [r4, #12]
 800071e:	071b      	lsls	r3, r3, #28
 8000720:	d51d      	bpl.n	800075e <_puts_r+0x66>
 8000722:	6923      	ldr	r3, [r4, #16]
 8000724:	b1db      	cbz	r3, 800075e <_puts_r+0x66>
 8000726:	3e01      	subs	r6, #1
 8000728:	68a3      	ldr	r3, [r4, #8]
 800072a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800072e:	3b01      	subs	r3, #1
 8000730:	60a3      	str	r3, [r4, #8]
 8000732:	b9e9      	cbnz	r1, 8000770 <_puts_r+0x78>
 8000734:	2b00      	cmp	r3, #0
 8000736:	da2e      	bge.n	8000796 <_puts_r+0x9e>
 8000738:	4622      	mov	r2, r4
 800073a:	210a      	movs	r1, #10
 800073c:	4628      	mov	r0, r5
 800073e:	f000 f83f 	bl	80007c0 <__swbuf_r>
 8000742:	3001      	adds	r0, #1
 8000744:	d011      	beq.n	800076a <_puts_r+0x72>
 8000746:	200a      	movs	r0, #10
 8000748:	e011      	b.n	800076e <_puts_r+0x76>
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <_puts_r+0xb0>)
 800074c:	429c      	cmp	r4, r3
 800074e:	d101      	bne.n	8000754 <_puts_r+0x5c>
 8000750:	68ac      	ldr	r4, [r5, #8]
 8000752:	e7e3      	b.n	800071c <_puts_r+0x24>
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <_puts_r+0xb4>)
 8000756:	429c      	cmp	r4, r3
 8000758:	bf08      	it	eq
 800075a:	68ec      	ldreq	r4, [r5, #12]
 800075c:	e7de      	b.n	800071c <_puts_r+0x24>
 800075e:	4621      	mov	r1, r4
 8000760:	4628      	mov	r0, r5
 8000762:	f000 f87f 	bl	8000864 <__swsetup_r>
 8000766:	2800      	cmp	r0, #0
 8000768:	d0dd      	beq.n	8000726 <_puts_r+0x2e>
 800076a:	f04f 30ff 	mov.w	r0, #4294967295
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	2b00      	cmp	r3, #0
 8000772:	da04      	bge.n	800077e <_puts_r+0x86>
 8000774:	69a2      	ldr	r2, [r4, #24]
 8000776:	429a      	cmp	r2, r3
 8000778:	dc06      	bgt.n	8000788 <_puts_r+0x90>
 800077a:	290a      	cmp	r1, #10
 800077c:	d004      	beq.n	8000788 <_puts_r+0x90>
 800077e:	6823      	ldr	r3, [r4, #0]
 8000780:	1c5a      	adds	r2, r3, #1
 8000782:	6022      	str	r2, [r4, #0]
 8000784:	7019      	strb	r1, [r3, #0]
 8000786:	e7cf      	b.n	8000728 <_puts_r+0x30>
 8000788:	4622      	mov	r2, r4
 800078a:	4628      	mov	r0, r5
 800078c:	f000 f818 	bl	80007c0 <__swbuf_r>
 8000790:	3001      	adds	r0, #1
 8000792:	d1c9      	bne.n	8000728 <_puts_r+0x30>
 8000794:	e7e9      	b.n	800076a <_puts_r+0x72>
 8000796:	6823      	ldr	r3, [r4, #0]
 8000798:	200a      	movs	r0, #10
 800079a:	1c5a      	adds	r2, r3, #1
 800079c:	6022      	str	r2, [r4, #0]
 800079e:	7018      	strb	r0, [r3, #0]
 80007a0:	e7e5      	b.n	800076e <_puts_r+0x76>
 80007a2:	bf00      	nop
 80007a4:	08001094 	.word	0x08001094
 80007a8:	080010b4 	.word	0x080010b4
 80007ac:	08001074 	.word	0x08001074

080007b0 <puts>:
 80007b0:	4b02      	ldr	r3, [pc, #8]	; (80007bc <puts+0xc>)
 80007b2:	4601      	mov	r1, r0
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	f7ff bf9f 	b.w	80006f8 <_puts_r>
 80007ba:	bf00      	nop
 80007bc:	20000010 	.word	0x20000010

080007c0 <__swbuf_r>:
 80007c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c2:	460e      	mov	r6, r1
 80007c4:	4614      	mov	r4, r2
 80007c6:	4605      	mov	r5, r0
 80007c8:	b118      	cbz	r0, 80007d2 <__swbuf_r+0x12>
 80007ca:	6983      	ldr	r3, [r0, #24]
 80007cc:	b90b      	cbnz	r3, 80007d2 <__swbuf_r+0x12>
 80007ce:	f000 f9a7 	bl	8000b20 <__sinit>
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <__swbuf_r+0x98>)
 80007d4:	429c      	cmp	r4, r3
 80007d6:	d12a      	bne.n	800082e <__swbuf_r+0x6e>
 80007d8:	686c      	ldr	r4, [r5, #4]
 80007da:	69a3      	ldr	r3, [r4, #24]
 80007dc:	60a3      	str	r3, [r4, #8]
 80007de:	89a3      	ldrh	r3, [r4, #12]
 80007e0:	071a      	lsls	r2, r3, #28
 80007e2:	d52e      	bpl.n	8000842 <__swbuf_r+0x82>
 80007e4:	6923      	ldr	r3, [r4, #16]
 80007e6:	b363      	cbz	r3, 8000842 <__swbuf_r+0x82>
 80007e8:	6923      	ldr	r3, [r4, #16]
 80007ea:	6820      	ldr	r0, [r4, #0]
 80007ec:	1ac0      	subs	r0, r0, r3
 80007ee:	6963      	ldr	r3, [r4, #20]
 80007f0:	b2f6      	uxtb	r6, r6
 80007f2:	4283      	cmp	r3, r0
 80007f4:	4637      	mov	r7, r6
 80007f6:	dc04      	bgt.n	8000802 <__swbuf_r+0x42>
 80007f8:	4621      	mov	r1, r4
 80007fa:	4628      	mov	r0, r5
 80007fc:	f000 f926 	bl	8000a4c <_fflush_r>
 8000800:	bb28      	cbnz	r0, 800084e <__swbuf_r+0x8e>
 8000802:	68a3      	ldr	r3, [r4, #8]
 8000804:	3b01      	subs	r3, #1
 8000806:	60a3      	str	r3, [r4, #8]
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	1c5a      	adds	r2, r3, #1
 800080c:	6022      	str	r2, [r4, #0]
 800080e:	701e      	strb	r6, [r3, #0]
 8000810:	6963      	ldr	r3, [r4, #20]
 8000812:	3001      	adds	r0, #1
 8000814:	4283      	cmp	r3, r0
 8000816:	d004      	beq.n	8000822 <__swbuf_r+0x62>
 8000818:	89a3      	ldrh	r3, [r4, #12]
 800081a:	07db      	lsls	r3, r3, #31
 800081c:	d519      	bpl.n	8000852 <__swbuf_r+0x92>
 800081e:	2e0a      	cmp	r6, #10
 8000820:	d117      	bne.n	8000852 <__swbuf_r+0x92>
 8000822:	4621      	mov	r1, r4
 8000824:	4628      	mov	r0, r5
 8000826:	f000 f911 	bl	8000a4c <_fflush_r>
 800082a:	b190      	cbz	r0, 8000852 <__swbuf_r+0x92>
 800082c:	e00f      	b.n	800084e <__swbuf_r+0x8e>
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <__swbuf_r+0x9c>)
 8000830:	429c      	cmp	r4, r3
 8000832:	d101      	bne.n	8000838 <__swbuf_r+0x78>
 8000834:	68ac      	ldr	r4, [r5, #8]
 8000836:	e7d0      	b.n	80007da <__swbuf_r+0x1a>
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <__swbuf_r+0xa0>)
 800083a:	429c      	cmp	r4, r3
 800083c:	bf08      	it	eq
 800083e:	68ec      	ldreq	r4, [r5, #12]
 8000840:	e7cb      	b.n	80007da <__swbuf_r+0x1a>
 8000842:	4621      	mov	r1, r4
 8000844:	4628      	mov	r0, r5
 8000846:	f000 f80d 	bl	8000864 <__swsetup_r>
 800084a:	2800      	cmp	r0, #0
 800084c:	d0cc      	beq.n	80007e8 <__swbuf_r+0x28>
 800084e:	f04f 37ff 	mov.w	r7, #4294967295
 8000852:	4638      	mov	r0, r7
 8000854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000856:	bf00      	nop
 8000858:	08001094 	.word	0x08001094
 800085c:	080010b4 	.word	0x080010b4
 8000860:	08001074 	.word	0x08001074

08000864 <__swsetup_r>:
 8000864:	4b32      	ldr	r3, [pc, #200]	; (8000930 <__swsetup_r+0xcc>)
 8000866:	b570      	push	{r4, r5, r6, lr}
 8000868:	681d      	ldr	r5, [r3, #0]
 800086a:	4606      	mov	r6, r0
 800086c:	460c      	mov	r4, r1
 800086e:	b125      	cbz	r5, 800087a <__swsetup_r+0x16>
 8000870:	69ab      	ldr	r3, [r5, #24]
 8000872:	b913      	cbnz	r3, 800087a <__swsetup_r+0x16>
 8000874:	4628      	mov	r0, r5
 8000876:	f000 f953 	bl	8000b20 <__sinit>
 800087a:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <__swsetup_r+0xd0>)
 800087c:	429c      	cmp	r4, r3
 800087e:	d10f      	bne.n	80008a0 <__swsetup_r+0x3c>
 8000880:	686c      	ldr	r4, [r5, #4]
 8000882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000886:	b29a      	uxth	r2, r3
 8000888:	0715      	lsls	r5, r2, #28
 800088a:	d42c      	bmi.n	80008e6 <__swsetup_r+0x82>
 800088c:	06d0      	lsls	r0, r2, #27
 800088e:	d411      	bmi.n	80008b4 <__swsetup_r+0x50>
 8000890:	2209      	movs	r2, #9
 8000892:	6032      	str	r2, [r6, #0]
 8000894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000898:	81a3      	strh	r3, [r4, #12]
 800089a:	f04f 30ff 	mov.w	r0, #4294967295
 800089e:	e03e      	b.n	800091e <__swsetup_r+0xba>
 80008a0:	4b25      	ldr	r3, [pc, #148]	; (8000938 <__swsetup_r+0xd4>)
 80008a2:	429c      	cmp	r4, r3
 80008a4:	d101      	bne.n	80008aa <__swsetup_r+0x46>
 80008a6:	68ac      	ldr	r4, [r5, #8]
 80008a8:	e7eb      	b.n	8000882 <__swsetup_r+0x1e>
 80008aa:	4b24      	ldr	r3, [pc, #144]	; (800093c <__swsetup_r+0xd8>)
 80008ac:	429c      	cmp	r4, r3
 80008ae:	bf08      	it	eq
 80008b0:	68ec      	ldreq	r4, [r5, #12]
 80008b2:	e7e6      	b.n	8000882 <__swsetup_r+0x1e>
 80008b4:	0751      	lsls	r1, r2, #29
 80008b6:	d512      	bpl.n	80008de <__swsetup_r+0x7a>
 80008b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008ba:	b141      	cbz	r1, 80008ce <__swsetup_r+0x6a>
 80008bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008c0:	4299      	cmp	r1, r3
 80008c2:	d002      	beq.n	80008ca <__swsetup_r+0x66>
 80008c4:	4630      	mov	r0, r6
 80008c6:	f000 fa19 	bl	8000cfc <_free_r>
 80008ca:	2300      	movs	r3, #0
 80008cc:	6363      	str	r3, [r4, #52]	; 0x34
 80008ce:	89a3      	ldrh	r3, [r4, #12]
 80008d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80008d4:	81a3      	strh	r3, [r4, #12]
 80008d6:	2300      	movs	r3, #0
 80008d8:	6063      	str	r3, [r4, #4]
 80008da:	6923      	ldr	r3, [r4, #16]
 80008dc:	6023      	str	r3, [r4, #0]
 80008de:	89a3      	ldrh	r3, [r4, #12]
 80008e0:	f043 0308 	orr.w	r3, r3, #8
 80008e4:	81a3      	strh	r3, [r4, #12]
 80008e6:	6923      	ldr	r3, [r4, #16]
 80008e8:	b94b      	cbnz	r3, 80008fe <__swsetup_r+0x9a>
 80008ea:	89a3      	ldrh	r3, [r4, #12]
 80008ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80008f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008f4:	d003      	beq.n	80008fe <__swsetup_r+0x9a>
 80008f6:	4621      	mov	r1, r4
 80008f8:	4630      	mov	r0, r6
 80008fa:	f000 f9bf 	bl	8000c7c <__smakebuf_r>
 80008fe:	89a2      	ldrh	r2, [r4, #12]
 8000900:	f012 0301 	ands.w	r3, r2, #1
 8000904:	d00c      	beq.n	8000920 <__swsetup_r+0xbc>
 8000906:	2300      	movs	r3, #0
 8000908:	60a3      	str	r3, [r4, #8]
 800090a:	6963      	ldr	r3, [r4, #20]
 800090c:	425b      	negs	r3, r3
 800090e:	61a3      	str	r3, [r4, #24]
 8000910:	6923      	ldr	r3, [r4, #16]
 8000912:	b953      	cbnz	r3, 800092a <__swsetup_r+0xc6>
 8000914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000918:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800091c:	d1ba      	bne.n	8000894 <__swsetup_r+0x30>
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	0792      	lsls	r2, r2, #30
 8000922:	bf58      	it	pl
 8000924:	6963      	ldrpl	r3, [r4, #20]
 8000926:	60a3      	str	r3, [r4, #8]
 8000928:	e7f2      	b.n	8000910 <__swsetup_r+0xac>
 800092a:	2000      	movs	r0, #0
 800092c:	e7f7      	b.n	800091e <__swsetup_r+0xba>
 800092e:	bf00      	nop
 8000930:	20000010 	.word	0x20000010
 8000934:	08001094 	.word	0x08001094
 8000938:	080010b4 	.word	0x080010b4
 800093c:	08001074 	.word	0x08001074

08000940 <__sflush_r>:
 8000940:	898a      	ldrh	r2, [r1, #12]
 8000942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000946:	4605      	mov	r5, r0
 8000948:	0710      	lsls	r0, r2, #28
 800094a:	460c      	mov	r4, r1
 800094c:	d458      	bmi.n	8000a00 <__sflush_r+0xc0>
 800094e:	684b      	ldr	r3, [r1, #4]
 8000950:	2b00      	cmp	r3, #0
 8000952:	dc05      	bgt.n	8000960 <__sflush_r+0x20>
 8000954:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000956:	2b00      	cmp	r3, #0
 8000958:	dc02      	bgt.n	8000960 <__sflush_r+0x20>
 800095a:	2000      	movs	r0, #0
 800095c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000962:	2e00      	cmp	r6, #0
 8000964:	d0f9      	beq.n	800095a <__sflush_r+0x1a>
 8000966:	2300      	movs	r3, #0
 8000968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800096c:	682f      	ldr	r7, [r5, #0]
 800096e:	6a21      	ldr	r1, [r4, #32]
 8000970:	602b      	str	r3, [r5, #0]
 8000972:	d032      	beq.n	80009da <__sflush_r+0x9a>
 8000974:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000976:	89a3      	ldrh	r3, [r4, #12]
 8000978:	075a      	lsls	r2, r3, #29
 800097a:	d505      	bpl.n	8000988 <__sflush_r+0x48>
 800097c:	6863      	ldr	r3, [r4, #4]
 800097e:	1ac0      	subs	r0, r0, r3
 8000980:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000982:	b10b      	cbz	r3, 8000988 <__sflush_r+0x48>
 8000984:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000986:	1ac0      	subs	r0, r0, r3
 8000988:	2300      	movs	r3, #0
 800098a:	4602      	mov	r2, r0
 800098c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800098e:	6a21      	ldr	r1, [r4, #32]
 8000990:	4628      	mov	r0, r5
 8000992:	47b0      	blx	r6
 8000994:	1c43      	adds	r3, r0, #1
 8000996:	89a3      	ldrh	r3, [r4, #12]
 8000998:	d106      	bne.n	80009a8 <__sflush_r+0x68>
 800099a:	6829      	ldr	r1, [r5, #0]
 800099c:	291d      	cmp	r1, #29
 800099e:	d848      	bhi.n	8000a32 <__sflush_r+0xf2>
 80009a0:	4a29      	ldr	r2, [pc, #164]	; (8000a48 <__sflush_r+0x108>)
 80009a2:	40ca      	lsrs	r2, r1
 80009a4:	07d6      	lsls	r6, r2, #31
 80009a6:	d544      	bpl.n	8000a32 <__sflush_r+0xf2>
 80009a8:	2200      	movs	r2, #0
 80009aa:	6062      	str	r2, [r4, #4]
 80009ac:	04d9      	lsls	r1, r3, #19
 80009ae:	6922      	ldr	r2, [r4, #16]
 80009b0:	6022      	str	r2, [r4, #0]
 80009b2:	d504      	bpl.n	80009be <__sflush_r+0x7e>
 80009b4:	1c42      	adds	r2, r0, #1
 80009b6:	d101      	bne.n	80009bc <__sflush_r+0x7c>
 80009b8:	682b      	ldr	r3, [r5, #0]
 80009ba:	b903      	cbnz	r3, 80009be <__sflush_r+0x7e>
 80009bc:	6560      	str	r0, [r4, #84]	; 0x54
 80009be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009c0:	602f      	str	r7, [r5, #0]
 80009c2:	2900      	cmp	r1, #0
 80009c4:	d0c9      	beq.n	800095a <__sflush_r+0x1a>
 80009c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009ca:	4299      	cmp	r1, r3
 80009cc:	d002      	beq.n	80009d4 <__sflush_r+0x94>
 80009ce:	4628      	mov	r0, r5
 80009d0:	f000 f994 	bl	8000cfc <_free_r>
 80009d4:	2000      	movs	r0, #0
 80009d6:	6360      	str	r0, [r4, #52]	; 0x34
 80009d8:	e7c0      	b.n	800095c <__sflush_r+0x1c>
 80009da:	2301      	movs	r3, #1
 80009dc:	4628      	mov	r0, r5
 80009de:	47b0      	blx	r6
 80009e0:	1c41      	adds	r1, r0, #1
 80009e2:	d1c8      	bne.n	8000976 <__sflush_r+0x36>
 80009e4:	682b      	ldr	r3, [r5, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0c5      	beq.n	8000976 <__sflush_r+0x36>
 80009ea:	2b1d      	cmp	r3, #29
 80009ec:	d001      	beq.n	80009f2 <__sflush_r+0xb2>
 80009ee:	2b16      	cmp	r3, #22
 80009f0:	d101      	bne.n	80009f6 <__sflush_r+0xb6>
 80009f2:	602f      	str	r7, [r5, #0]
 80009f4:	e7b1      	b.n	800095a <__sflush_r+0x1a>
 80009f6:	89a3      	ldrh	r3, [r4, #12]
 80009f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009fc:	81a3      	strh	r3, [r4, #12]
 80009fe:	e7ad      	b.n	800095c <__sflush_r+0x1c>
 8000a00:	690f      	ldr	r7, [r1, #16]
 8000a02:	2f00      	cmp	r7, #0
 8000a04:	d0a9      	beq.n	800095a <__sflush_r+0x1a>
 8000a06:	0793      	lsls	r3, r2, #30
 8000a08:	680e      	ldr	r6, [r1, #0]
 8000a0a:	bf08      	it	eq
 8000a0c:	694b      	ldreq	r3, [r1, #20]
 8000a0e:	600f      	str	r7, [r1, #0]
 8000a10:	bf18      	it	ne
 8000a12:	2300      	movne	r3, #0
 8000a14:	eba6 0807 	sub.w	r8, r6, r7
 8000a18:	608b      	str	r3, [r1, #8]
 8000a1a:	f1b8 0f00 	cmp.w	r8, #0
 8000a1e:	dd9c      	ble.n	800095a <__sflush_r+0x1a>
 8000a20:	4643      	mov	r3, r8
 8000a22:	463a      	mov	r2, r7
 8000a24:	6a21      	ldr	r1, [r4, #32]
 8000a26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a28:	4628      	mov	r0, r5
 8000a2a:	47b0      	blx	r6
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	dc06      	bgt.n	8000a3e <__sflush_r+0xfe>
 8000a30:	89a3      	ldrh	r3, [r4, #12]
 8000a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a36:	81a3      	strh	r3, [r4, #12]
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	e78e      	b.n	800095c <__sflush_r+0x1c>
 8000a3e:	4407      	add	r7, r0
 8000a40:	eba8 0800 	sub.w	r8, r8, r0
 8000a44:	e7e9      	b.n	8000a1a <__sflush_r+0xda>
 8000a46:	bf00      	nop
 8000a48:	20400001 	.word	0x20400001

08000a4c <_fflush_r>:
 8000a4c:	b538      	push	{r3, r4, r5, lr}
 8000a4e:	690b      	ldr	r3, [r1, #16]
 8000a50:	4605      	mov	r5, r0
 8000a52:	460c      	mov	r4, r1
 8000a54:	b1db      	cbz	r3, 8000a8e <_fflush_r+0x42>
 8000a56:	b118      	cbz	r0, 8000a60 <_fflush_r+0x14>
 8000a58:	6983      	ldr	r3, [r0, #24]
 8000a5a:	b90b      	cbnz	r3, 8000a60 <_fflush_r+0x14>
 8000a5c:	f000 f860 	bl	8000b20 <__sinit>
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <_fflush_r+0x48>)
 8000a62:	429c      	cmp	r4, r3
 8000a64:	d109      	bne.n	8000a7a <_fflush_r+0x2e>
 8000a66:	686c      	ldr	r4, [r5, #4]
 8000a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a6c:	b17b      	cbz	r3, 8000a8e <_fflush_r+0x42>
 8000a6e:	4621      	mov	r1, r4
 8000a70:	4628      	mov	r0, r5
 8000a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a76:	f7ff bf63 	b.w	8000940 <__sflush_r>
 8000a7a:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <_fflush_r+0x4c>)
 8000a7c:	429c      	cmp	r4, r3
 8000a7e:	d101      	bne.n	8000a84 <_fflush_r+0x38>
 8000a80:	68ac      	ldr	r4, [r5, #8]
 8000a82:	e7f1      	b.n	8000a68 <_fflush_r+0x1c>
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <_fflush_r+0x50>)
 8000a86:	429c      	cmp	r4, r3
 8000a88:	bf08      	it	eq
 8000a8a:	68ec      	ldreq	r4, [r5, #12]
 8000a8c:	e7ec      	b.n	8000a68 <_fflush_r+0x1c>
 8000a8e:	2000      	movs	r0, #0
 8000a90:	bd38      	pop	{r3, r4, r5, pc}
 8000a92:	bf00      	nop
 8000a94:	08001094 	.word	0x08001094
 8000a98:	080010b4 	.word	0x080010b4
 8000a9c:	08001074 	.word	0x08001074

08000aa0 <std>:
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	b510      	push	{r4, lr}
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8000aaa:	6083      	str	r3, [r0, #8]
 8000aac:	8181      	strh	r1, [r0, #12]
 8000aae:	6643      	str	r3, [r0, #100]	; 0x64
 8000ab0:	81c2      	strh	r2, [r0, #14]
 8000ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ab6:	6183      	str	r3, [r0, #24]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	2208      	movs	r2, #8
 8000abc:	305c      	adds	r0, #92	; 0x5c
 8000abe:	f7ff fe13 	bl	80006e8 <memset>
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <std+0x38>)
 8000ac4:	6263      	str	r3, [r4, #36]	; 0x24
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <std+0x3c>)
 8000ac8:	62a3      	str	r3, [r4, #40]	; 0x28
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <std+0x40>)
 8000acc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <std+0x44>)
 8000ad0:	6224      	str	r4, [r4, #32]
 8000ad2:	6323      	str	r3, [r4, #48]	; 0x30
 8000ad4:	bd10      	pop	{r4, pc}
 8000ad6:	bf00      	nop
 8000ad8:	08000e6d 	.word	0x08000e6d
 8000adc:	08000e8f 	.word	0x08000e8f
 8000ae0:	08000ec7 	.word	0x08000ec7
 8000ae4:	08000eeb 	.word	0x08000eeb

08000ae8 <_cleanup_r>:
 8000ae8:	4901      	ldr	r1, [pc, #4]	; (8000af0 <_cleanup_r+0x8>)
 8000aea:	f000 b885 	b.w	8000bf8 <_fwalk_reent>
 8000aee:	bf00      	nop
 8000af0:	08000a4d 	.word	0x08000a4d

08000af4 <__sfmoreglue>:
 8000af4:	b570      	push	{r4, r5, r6, lr}
 8000af6:	1e4a      	subs	r2, r1, #1
 8000af8:	2568      	movs	r5, #104	; 0x68
 8000afa:	4355      	muls	r5, r2
 8000afc:	460e      	mov	r6, r1
 8000afe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b02:	f000 f949 	bl	8000d98 <_malloc_r>
 8000b06:	4604      	mov	r4, r0
 8000b08:	b140      	cbz	r0, 8000b1c <__sfmoreglue+0x28>
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	e9c0 1600 	strd	r1, r6, [r0]
 8000b10:	300c      	adds	r0, #12
 8000b12:	60a0      	str	r0, [r4, #8]
 8000b14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b18:	f7ff fde6 	bl	80006e8 <memset>
 8000b1c:	4620      	mov	r0, r4
 8000b1e:	bd70      	pop	{r4, r5, r6, pc}

08000b20 <__sinit>:
 8000b20:	6983      	ldr	r3, [r0, #24]
 8000b22:	b510      	push	{r4, lr}
 8000b24:	4604      	mov	r4, r0
 8000b26:	bb33      	cbnz	r3, 8000b76 <__sinit+0x56>
 8000b28:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000b2c:	6503      	str	r3, [r0, #80]	; 0x50
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <__sinit+0x58>)
 8000b30:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <__sinit+0x5c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	6282      	str	r2, [r0, #40]	; 0x28
 8000b36:	4298      	cmp	r0, r3
 8000b38:	bf04      	itt	eq
 8000b3a:	2301      	moveq	r3, #1
 8000b3c:	6183      	streq	r3, [r0, #24]
 8000b3e:	f000 f81f 	bl	8000b80 <__sfp>
 8000b42:	6060      	str	r0, [r4, #4]
 8000b44:	4620      	mov	r0, r4
 8000b46:	f000 f81b 	bl	8000b80 <__sfp>
 8000b4a:	60a0      	str	r0, [r4, #8]
 8000b4c:	4620      	mov	r0, r4
 8000b4e:	f000 f817 	bl	8000b80 <__sfp>
 8000b52:	2200      	movs	r2, #0
 8000b54:	60e0      	str	r0, [r4, #12]
 8000b56:	2104      	movs	r1, #4
 8000b58:	6860      	ldr	r0, [r4, #4]
 8000b5a:	f7ff ffa1 	bl	8000aa0 <std>
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2109      	movs	r1, #9
 8000b62:	68a0      	ldr	r0, [r4, #8]
 8000b64:	f7ff ff9c 	bl	8000aa0 <std>
 8000b68:	2202      	movs	r2, #2
 8000b6a:	2112      	movs	r1, #18
 8000b6c:	68e0      	ldr	r0, [r4, #12]
 8000b6e:	f7ff ff97 	bl	8000aa0 <std>
 8000b72:	2301      	movs	r3, #1
 8000b74:	61a3      	str	r3, [r4, #24]
 8000b76:	bd10      	pop	{r4, pc}
 8000b78:	08001070 	.word	0x08001070
 8000b7c:	08000ae9 	.word	0x08000ae9

08000b80 <__sfp>:
 8000b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b82:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <__sfp+0x70>)
 8000b84:	681e      	ldr	r6, [r3, #0]
 8000b86:	69b3      	ldr	r3, [r6, #24]
 8000b88:	4607      	mov	r7, r0
 8000b8a:	b913      	cbnz	r3, 8000b92 <__sfp+0x12>
 8000b8c:	4630      	mov	r0, r6
 8000b8e:	f7ff ffc7 	bl	8000b20 <__sinit>
 8000b92:	3648      	adds	r6, #72	; 0x48
 8000b94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	d503      	bpl.n	8000ba4 <__sfp+0x24>
 8000b9c:	6833      	ldr	r3, [r6, #0]
 8000b9e:	b133      	cbz	r3, 8000bae <__sfp+0x2e>
 8000ba0:	6836      	ldr	r6, [r6, #0]
 8000ba2:	e7f7      	b.n	8000b94 <__sfp+0x14>
 8000ba4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000ba8:	b16d      	cbz	r5, 8000bc6 <__sfp+0x46>
 8000baa:	3468      	adds	r4, #104	; 0x68
 8000bac:	e7f4      	b.n	8000b98 <__sfp+0x18>
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4638      	mov	r0, r7
 8000bb2:	f7ff ff9f 	bl	8000af4 <__sfmoreglue>
 8000bb6:	6030      	str	r0, [r6, #0]
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	d1f1      	bne.n	8000ba0 <__sfp+0x20>
 8000bbc:	230c      	movs	r3, #12
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <__sfp+0x74>)
 8000bc8:	6665      	str	r5, [r4, #100]	; 0x64
 8000bca:	e9c4 5500 	strd	r5, r5, [r4]
 8000bce:	60a5      	str	r5, [r4, #8]
 8000bd0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000bd4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000bd8:	2208      	movs	r2, #8
 8000bda:	4629      	mov	r1, r5
 8000bdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000be0:	f7ff fd82 	bl	80006e8 <memset>
 8000be4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000be8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000bec:	e7e9      	b.n	8000bc2 <__sfp+0x42>
 8000bee:	bf00      	nop
 8000bf0:	08001070 	.word	0x08001070
 8000bf4:	ffff0001 	.word	0xffff0001

08000bf8 <_fwalk_reent>:
 8000bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bfc:	4680      	mov	r8, r0
 8000bfe:	4689      	mov	r9, r1
 8000c00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c04:	2600      	movs	r6, #0
 8000c06:	b914      	cbnz	r4, 8000c0e <_fwalk_reent+0x16>
 8000c08:	4630      	mov	r0, r6
 8000c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c0e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000c12:	3f01      	subs	r7, #1
 8000c14:	d501      	bpl.n	8000c1a <_fwalk_reent+0x22>
 8000c16:	6824      	ldr	r4, [r4, #0]
 8000c18:	e7f5      	b.n	8000c06 <_fwalk_reent+0xe>
 8000c1a:	89ab      	ldrh	r3, [r5, #12]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d907      	bls.n	8000c30 <_fwalk_reent+0x38>
 8000c20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c24:	3301      	adds	r3, #1
 8000c26:	d003      	beq.n	8000c30 <_fwalk_reent+0x38>
 8000c28:	4629      	mov	r1, r5
 8000c2a:	4640      	mov	r0, r8
 8000c2c:	47c8      	blx	r9
 8000c2e:	4306      	orrs	r6, r0
 8000c30:	3568      	adds	r5, #104	; 0x68
 8000c32:	e7ee      	b.n	8000c12 <_fwalk_reent+0x1a>

08000c34 <__swhatbuf_r>:
 8000c34:	b570      	push	{r4, r5, r6, lr}
 8000c36:	460e      	mov	r6, r1
 8000c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	b096      	sub	sp, #88	; 0x58
 8000c40:	4614      	mov	r4, r2
 8000c42:	461d      	mov	r5, r3
 8000c44:	da07      	bge.n	8000c56 <__swhatbuf_r+0x22>
 8000c46:	2300      	movs	r3, #0
 8000c48:	602b      	str	r3, [r5, #0]
 8000c4a:	89b3      	ldrh	r3, [r6, #12]
 8000c4c:	061a      	lsls	r2, r3, #24
 8000c4e:	d410      	bmi.n	8000c72 <__swhatbuf_r+0x3e>
 8000c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c54:	e00e      	b.n	8000c74 <__swhatbuf_r+0x40>
 8000c56:	466a      	mov	r2, sp
 8000c58:	f000 f96e 	bl	8000f38 <_fstat_r>
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	dbf2      	blt.n	8000c46 <__swhatbuf_r+0x12>
 8000c60:	9a01      	ldr	r2, [sp, #4]
 8000c62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000c66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000c6a:	425a      	negs	r2, r3
 8000c6c:	415a      	adcs	r2, r3
 8000c6e:	602a      	str	r2, [r5, #0]
 8000c70:	e7ee      	b.n	8000c50 <__swhatbuf_r+0x1c>
 8000c72:	2340      	movs	r3, #64	; 0x40
 8000c74:	2000      	movs	r0, #0
 8000c76:	6023      	str	r3, [r4, #0]
 8000c78:	b016      	add	sp, #88	; 0x58
 8000c7a:	bd70      	pop	{r4, r5, r6, pc}

08000c7c <__smakebuf_r>:
 8000c7c:	898b      	ldrh	r3, [r1, #12]
 8000c7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c80:	079d      	lsls	r5, r3, #30
 8000c82:	4606      	mov	r6, r0
 8000c84:	460c      	mov	r4, r1
 8000c86:	d507      	bpl.n	8000c98 <__smakebuf_r+0x1c>
 8000c88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000c8c:	6023      	str	r3, [r4, #0]
 8000c8e:	6123      	str	r3, [r4, #16]
 8000c90:	2301      	movs	r3, #1
 8000c92:	6163      	str	r3, [r4, #20]
 8000c94:	b002      	add	sp, #8
 8000c96:	bd70      	pop	{r4, r5, r6, pc}
 8000c98:	ab01      	add	r3, sp, #4
 8000c9a:	466a      	mov	r2, sp
 8000c9c:	f7ff ffca 	bl	8000c34 <__swhatbuf_r>
 8000ca0:	9900      	ldr	r1, [sp, #0]
 8000ca2:	4605      	mov	r5, r0
 8000ca4:	4630      	mov	r0, r6
 8000ca6:	f000 f877 	bl	8000d98 <_malloc_r>
 8000caa:	b948      	cbnz	r0, 8000cc0 <__smakebuf_r+0x44>
 8000cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cb0:	059a      	lsls	r2, r3, #22
 8000cb2:	d4ef      	bmi.n	8000c94 <__smakebuf_r+0x18>
 8000cb4:	f023 0303 	bic.w	r3, r3, #3
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	81a3      	strh	r3, [r4, #12]
 8000cbe:	e7e3      	b.n	8000c88 <__smakebuf_r+0xc>
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <__smakebuf_r+0x7c>)
 8000cc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8000cc4:	89a3      	ldrh	r3, [r4, #12]
 8000cc6:	6020      	str	r0, [r4, #0]
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ccc:	81a3      	strh	r3, [r4, #12]
 8000cce:	9b00      	ldr	r3, [sp, #0]
 8000cd0:	6163      	str	r3, [r4, #20]
 8000cd2:	9b01      	ldr	r3, [sp, #4]
 8000cd4:	6120      	str	r0, [r4, #16]
 8000cd6:	b15b      	cbz	r3, 8000cf0 <__smakebuf_r+0x74>
 8000cd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000cdc:	4630      	mov	r0, r6
 8000cde:	f000 f93d 	bl	8000f5c <_isatty_r>
 8000ce2:	b128      	cbz	r0, 8000cf0 <__smakebuf_r+0x74>
 8000ce4:	89a3      	ldrh	r3, [r4, #12]
 8000ce6:	f023 0303 	bic.w	r3, r3, #3
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	81a3      	strh	r3, [r4, #12]
 8000cf0:	89a3      	ldrh	r3, [r4, #12]
 8000cf2:	431d      	orrs	r5, r3
 8000cf4:	81a5      	strh	r5, [r4, #12]
 8000cf6:	e7cd      	b.n	8000c94 <__smakebuf_r+0x18>
 8000cf8:	08000ae9 	.word	0x08000ae9

08000cfc <_free_r>:
 8000cfc:	b538      	push	{r3, r4, r5, lr}
 8000cfe:	4605      	mov	r5, r0
 8000d00:	2900      	cmp	r1, #0
 8000d02:	d045      	beq.n	8000d90 <_free_r+0x94>
 8000d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d08:	1f0c      	subs	r4, r1, #4
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	bfb8      	it	lt
 8000d0e:	18e4      	addlt	r4, r4, r3
 8000d10:	f000 f946 	bl	8000fa0 <__malloc_lock>
 8000d14:	4a1f      	ldr	r2, [pc, #124]	; (8000d94 <_free_r+0x98>)
 8000d16:	6813      	ldr	r3, [r2, #0]
 8000d18:	4610      	mov	r0, r2
 8000d1a:	b933      	cbnz	r3, 8000d2a <_free_r+0x2e>
 8000d1c:	6063      	str	r3, [r4, #4]
 8000d1e:	6014      	str	r4, [r2, #0]
 8000d20:	4628      	mov	r0, r5
 8000d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d26:	f000 b93c 	b.w	8000fa2 <__malloc_unlock>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d90c      	bls.n	8000d48 <_free_r+0x4c>
 8000d2e:	6821      	ldr	r1, [r4, #0]
 8000d30:	1862      	adds	r2, r4, r1
 8000d32:	4293      	cmp	r3, r2
 8000d34:	bf04      	itt	eq
 8000d36:	681a      	ldreq	r2, [r3, #0]
 8000d38:	685b      	ldreq	r3, [r3, #4]
 8000d3a:	6063      	str	r3, [r4, #4]
 8000d3c:	bf04      	itt	eq
 8000d3e:	1852      	addeq	r2, r2, r1
 8000d40:	6022      	streq	r2, [r4, #0]
 8000d42:	6004      	str	r4, [r0, #0]
 8000d44:	e7ec      	b.n	8000d20 <_free_r+0x24>
 8000d46:	4613      	mov	r3, r2
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	b10a      	cbz	r2, 8000d50 <_free_r+0x54>
 8000d4c:	42a2      	cmp	r2, r4
 8000d4e:	d9fa      	bls.n	8000d46 <_free_r+0x4a>
 8000d50:	6819      	ldr	r1, [r3, #0]
 8000d52:	1858      	adds	r0, r3, r1
 8000d54:	42a0      	cmp	r0, r4
 8000d56:	d10b      	bne.n	8000d70 <_free_r+0x74>
 8000d58:	6820      	ldr	r0, [r4, #0]
 8000d5a:	4401      	add	r1, r0
 8000d5c:	1858      	adds	r0, r3, r1
 8000d5e:	4282      	cmp	r2, r0
 8000d60:	6019      	str	r1, [r3, #0]
 8000d62:	d1dd      	bne.n	8000d20 <_free_r+0x24>
 8000d64:	6810      	ldr	r0, [r2, #0]
 8000d66:	6852      	ldr	r2, [r2, #4]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	4401      	add	r1, r0
 8000d6c:	6019      	str	r1, [r3, #0]
 8000d6e:	e7d7      	b.n	8000d20 <_free_r+0x24>
 8000d70:	d902      	bls.n	8000d78 <_free_r+0x7c>
 8000d72:	230c      	movs	r3, #12
 8000d74:	602b      	str	r3, [r5, #0]
 8000d76:	e7d3      	b.n	8000d20 <_free_r+0x24>
 8000d78:	6820      	ldr	r0, [r4, #0]
 8000d7a:	1821      	adds	r1, r4, r0
 8000d7c:	428a      	cmp	r2, r1
 8000d7e:	bf04      	itt	eq
 8000d80:	6811      	ldreq	r1, [r2, #0]
 8000d82:	6852      	ldreq	r2, [r2, #4]
 8000d84:	6062      	str	r2, [r4, #4]
 8000d86:	bf04      	itt	eq
 8000d88:	1809      	addeq	r1, r1, r0
 8000d8a:	6021      	streq	r1, [r4, #0]
 8000d8c:	605c      	str	r4, [r3, #4]
 8000d8e:	e7c7      	b.n	8000d20 <_free_r+0x24>
 8000d90:	bd38      	pop	{r3, r4, r5, pc}
 8000d92:	bf00      	nop
 8000d94:	20000094 	.word	0x20000094

08000d98 <_malloc_r>:
 8000d98:	b570      	push	{r4, r5, r6, lr}
 8000d9a:	1ccd      	adds	r5, r1, #3
 8000d9c:	f025 0503 	bic.w	r5, r5, #3
 8000da0:	3508      	adds	r5, #8
 8000da2:	2d0c      	cmp	r5, #12
 8000da4:	bf38      	it	cc
 8000da6:	250c      	movcc	r5, #12
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	4606      	mov	r6, r0
 8000dac:	db01      	blt.n	8000db2 <_malloc_r+0x1a>
 8000dae:	42a9      	cmp	r1, r5
 8000db0:	d903      	bls.n	8000dba <_malloc_r+0x22>
 8000db2:	230c      	movs	r3, #12
 8000db4:	6033      	str	r3, [r6, #0]
 8000db6:	2000      	movs	r0, #0
 8000db8:	bd70      	pop	{r4, r5, r6, pc}
 8000dba:	f000 f8f1 	bl	8000fa0 <__malloc_lock>
 8000dbe:	4a21      	ldr	r2, [pc, #132]	; (8000e44 <_malloc_r+0xac>)
 8000dc0:	6814      	ldr	r4, [r2, #0]
 8000dc2:	4621      	mov	r1, r4
 8000dc4:	b991      	cbnz	r1, 8000dec <_malloc_r+0x54>
 8000dc6:	4c20      	ldr	r4, [pc, #128]	; (8000e48 <_malloc_r+0xb0>)
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	b91b      	cbnz	r3, 8000dd4 <_malloc_r+0x3c>
 8000dcc:	4630      	mov	r0, r6
 8000dce:	f000 f83d 	bl	8000e4c <_sbrk_r>
 8000dd2:	6020      	str	r0, [r4, #0]
 8000dd4:	4629      	mov	r1, r5
 8000dd6:	4630      	mov	r0, r6
 8000dd8:	f000 f838 	bl	8000e4c <_sbrk_r>
 8000ddc:	1c43      	adds	r3, r0, #1
 8000dde:	d124      	bne.n	8000e2a <_malloc_r+0x92>
 8000de0:	230c      	movs	r3, #12
 8000de2:	6033      	str	r3, [r6, #0]
 8000de4:	4630      	mov	r0, r6
 8000de6:	f000 f8dc 	bl	8000fa2 <__malloc_unlock>
 8000dea:	e7e4      	b.n	8000db6 <_malloc_r+0x1e>
 8000dec:	680b      	ldr	r3, [r1, #0]
 8000dee:	1b5b      	subs	r3, r3, r5
 8000df0:	d418      	bmi.n	8000e24 <_malloc_r+0x8c>
 8000df2:	2b0b      	cmp	r3, #11
 8000df4:	d90f      	bls.n	8000e16 <_malloc_r+0x7e>
 8000df6:	600b      	str	r3, [r1, #0]
 8000df8:	50cd      	str	r5, [r1, r3]
 8000dfa:	18cc      	adds	r4, r1, r3
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	f000 f8d0 	bl	8000fa2 <__malloc_unlock>
 8000e02:	f104 000b 	add.w	r0, r4, #11
 8000e06:	1d23      	adds	r3, r4, #4
 8000e08:	f020 0007 	bic.w	r0, r0, #7
 8000e0c:	1ac3      	subs	r3, r0, r3
 8000e0e:	d0d3      	beq.n	8000db8 <_malloc_r+0x20>
 8000e10:	425a      	negs	r2, r3
 8000e12:	50e2      	str	r2, [r4, r3]
 8000e14:	e7d0      	b.n	8000db8 <_malloc_r+0x20>
 8000e16:	428c      	cmp	r4, r1
 8000e18:	684b      	ldr	r3, [r1, #4]
 8000e1a:	bf16      	itet	ne
 8000e1c:	6063      	strne	r3, [r4, #4]
 8000e1e:	6013      	streq	r3, [r2, #0]
 8000e20:	460c      	movne	r4, r1
 8000e22:	e7eb      	b.n	8000dfc <_malloc_r+0x64>
 8000e24:	460c      	mov	r4, r1
 8000e26:	6849      	ldr	r1, [r1, #4]
 8000e28:	e7cc      	b.n	8000dc4 <_malloc_r+0x2c>
 8000e2a:	1cc4      	adds	r4, r0, #3
 8000e2c:	f024 0403 	bic.w	r4, r4, #3
 8000e30:	42a0      	cmp	r0, r4
 8000e32:	d005      	beq.n	8000e40 <_malloc_r+0xa8>
 8000e34:	1a21      	subs	r1, r4, r0
 8000e36:	4630      	mov	r0, r6
 8000e38:	f000 f808 	bl	8000e4c <_sbrk_r>
 8000e3c:	3001      	adds	r0, #1
 8000e3e:	d0cf      	beq.n	8000de0 <_malloc_r+0x48>
 8000e40:	6025      	str	r5, [r4, #0]
 8000e42:	e7db      	b.n	8000dfc <_malloc_r+0x64>
 8000e44:	20000094 	.word	0x20000094
 8000e48:	20000098 	.word	0x20000098

08000e4c <_sbrk_r>:
 8000e4c:	b538      	push	{r3, r4, r5, lr}
 8000e4e:	4c06      	ldr	r4, [pc, #24]	; (8000e68 <_sbrk_r+0x1c>)
 8000e50:	2300      	movs	r3, #0
 8000e52:	4605      	mov	r5, r0
 8000e54:	4608      	mov	r0, r1
 8000e56:	6023      	str	r3, [r4, #0]
 8000e58:	f7ff fbc6 	bl	80005e8 <_sbrk>
 8000e5c:	1c43      	adds	r3, r0, #1
 8000e5e:	d102      	bne.n	8000e66 <_sbrk_r+0x1a>
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	b103      	cbz	r3, 8000e66 <_sbrk_r+0x1a>
 8000e64:	602b      	str	r3, [r5, #0]
 8000e66:	bd38      	pop	{r3, r4, r5, pc}
 8000e68:	200000b0 	.word	0x200000b0

08000e6c <__sread>:
 8000e6c:	b510      	push	{r4, lr}
 8000e6e:	460c      	mov	r4, r1
 8000e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e74:	f000 f896 	bl	8000fa4 <_read_r>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	bfab      	itete	ge
 8000e7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000e7e:	89a3      	ldrhlt	r3, [r4, #12]
 8000e80:	181b      	addge	r3, r3, r0
 8000e82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000e86:	bfac      	ite	ge
 8000e88:	6563      	strge	r3, [r4, #84]	; 0x54
 8000e8a:	81a3      	strhlt	r3, [r4, #12]
 8000e8c:	bd10      	pop	{r4, pc}

08000e8e <__swrite>:
 8000e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e92:	461f      	mov	r7, r3
 8000e94:	898b      	ldrh	r3, [r1, #12]
 8000e96:	05db      	lsls	r3, r3, #23
 8000e98:	4605      	mov	r5, r0
 8000e9a:	460c      	mov	r4, r1
 8000e9c:	4616      	mov	r6, r2
 8000e9e:	d505      	bpl.n	8000eac <__swrite+0x1e>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ea8:	f000 f868 	bl	8000f7c <_lseek_r>
 8000eac:	89a3      	ldrh	r3, [r4, #12]
 8000eae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000eb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000eb6:	81a3      	strh	r3, [r4, #12]
 8000eb8:	4632      	mov	r2, r6
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ec2:	f000 b817 	b.w	8000ef4 <_write_r>

08000ec6 <__sseek>:
 8000ec6:	b510      	push	{r4, lr}
 8000ec8:	460c      	mov	r4, r1
 8000eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ece:	f000 f855 	bl	8000f7c <_lseek_r>
 8000ed2:	1c43      	adds	r3, r0, #1
 8000ed4:	89a3      	ldrh	r3, [r4, #12]
 8000ed6:	bf15      	itete	ne
 8000ed8:	6560      	strne	r0, [r4, #84]	; 0x54
 8000eda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000ede:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000ee2:	81a3      	strheq	r3, [r4, #12]
 8000ee4:	bf18      	it	ne
 8000ee6:	81a3      	strhne	r3, [r4, #12]
 8000ee8:	bd10      	pop	{r4, pc}

08000eea <__sclose>:
 8000eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000eee:	f000 b813 	b.w	8000f18 <_close_r>
	...

08000ef4 <_write_r>:
 8000ef4:	b538      	push	{r3, r4, r5, lr}
 8000ef6:	4c07      	ldr	r4, [pc, #28]	; (8000f14 <_write_r+0x20>)
 8000ef8:	4605      	mov	r5, r0
 8000efa:	4608      	mov	r0, r1
 8000efc:	4611      	mov	r1, r2
 8000efe:	2200      	movs	r2, #0
 8000f00:	6022      	str	r2, [r4, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	f7ff fb1f 	bl	8000546 <_write>
 8000f08:	1c43      	adds	r3, r0, #1
 8000f0a:	d102      	bne.n	8000f12 <_write_r+0x1e>
 8000f0c:	6823      	ldr	r3, [r4, #0]
 8000f0e:	b103      	cbz	r3, 8000f12 <_write_r+0x1e>
 8000f10:	602b      	str	r3, [r5, #0]
 8000f12:	bd38      	pop	{r3, r4, r5, pc}
 8000f14:	200000b0 	.word	0x200000b0

08000f18 <_close_r>:
 8000f18:	b538      	push	{r3, r4, r5, lr}
 8000f1a:	4c06      	ldr	r4, [pc, #24]	; (8000f34 <_close_r+0x1c>)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	4605      	mov	r5, r0
 8000f20:	4608      	mov	r0, r1
 8000f22:	6023      	str	r3, [r4, #0]
 8000f24:	f7ff fb2b 	bl	800057e <_close>
 8000f28:	1c43      	adds	r3, r0, #1
 8000f2a:	d102      	bne.n	8000f32 <_close_r+0x1a>
 8000f2c:	6823      	ldr	r3, [r4, #0]
 8000f2e:	b103      	cbz	r3, 8000f32 <_close_r+0x1a>
 8000f30:	602b      	str	r3, [r5, #0]
 8000f32:	bd38      	pop	{r3, r4, r5, pc}
 8000f34:	200000b0 	.word	0x200000b0

08000f38 <_fstat_r>:
 8000f38:	b538      	push	{r3, r4, r5, lr}
 8000f3a:	4c07      	ldr	r4, [pc, #28]	; (8000f58 <_fstat_r+0x20>)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	4605      	mov	r5, r0
 8000f40:	4608      	mov	r0, r1
 8000f42:	4611      	mov	r1, r2
 8000f44:	6023      	str	r3, [r4, #0]
 8000f46:	f7ff fb26 	bl	8000596 <_fstat>
 8000f4a:	1c43      	adds	r3, r0, #1
 8000f4c:	d102      	bne.n	8000f54 <_fstat_r+0x1c>
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	b103      	cbz	r3, 8000f54 <_fstat_r+0x1c>
 8000f52:	602b      	str	r3, [r5, #0]
 8000f54:	bd38      	pop	{r3, r4, r5, pc}
 8000f56:	bf00      	nop
 8000f58:	200000b0 	.word	0x200000b0

08000f5c <_isatty_r>:
 8000f5c:	b538      	push	{r3, r4, r5, lr}
 8000f5e:	4c06      	ldr	r4, [pc, #24]	; (8000f78 <_isatty_r+0x1c>)
 8000f60:	2300      	movs	r3, #0
 8000f62:	4605      	mov	r5, r0
 8000f64:	4608      	mov	r0, r1
 8000f66:	6023      	str	r3, [r4, #0]
 8000f68:	f7ff fb25 	bl	80005b6 <_isatty>
 8000f6c:	1c43      	adds	r3, r0, #1
 8000f6e:	d102      	bne.n	8000f76 <_isatty_r+0x1a>
 8000f70:	6823      	ldr	r3, [r4, #0]
 8000f72:	b103      	cbz	r3, 8000f76 <_isatty_r+0x1a>
 8000f74:	602b      	str	r3, [r5, #0]
 8000f76:	bd38      	pop	{r3, r4, r5, pc}
 8000f78:	200000b0 	.word	0x200000b0

08000f7c <_lseek_r>:
 8000f7c:	b538      	push	{r3, r4, r5, lr}
 8000f7e:	4c07      	ldr	r4, [pc, #28]	; (8000f9c <_lseek_r+0x20>)
 8000f80:	4605      	mov	r5, r0
 8000f82:	4608      	mov	r0, r1
 8000f84:	4611      	mov	r1, r2
 8000f86:	2200      	movs	r2, #0
 8000f88:	6022      	str	r2, [r4, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f7ff fb1e 	bl	80005cc <_lseek>
 8000f90:	1c43      	adds	r3, r0, #1
 8000f92:	d102      	bne.n	8000f9a <_lseek_r+0x1e>
 8000f94:	6823      	ldr	r3, [r4, #0]
 8000f96:	b103      	cbz	r3, 8000f9a <_lseek_r+0x1e>
 8000f98:	602b      	str	r3, [r5, #0]
 8000f9a:	bd38      	pop	{r3, r4, r5, pc}
 8000f9c:	200000b0 	.word	0x200000b0

08000fa0 <__malloc_lock>:
 8000fa0:	4770      	bx	lr

08000fa2 <__malloc_unlock>:
 8000fa2:	4770      	bx	lr

08000fa4 <_read_r>:
 8000fa4:	b538      	push	{r3, r4, r5, lr}
 8000fa6:	4c07      	ldr	r4, [pc, #28]	; (8000fc4 <_read_r+0x20>)
 8000fa8:	4605      	mov	r5, r0
 8000faa:	4608      	mov	r0, r1
 8000fac:	4611      	mov	r1, r2
 8000fae:	2200      	movs	r2, #0
 8000fb0:	6022      	str	r2, [r4, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f7ff faaa 	bl	800050c <_read>
 8000fb8:	1c43      	adds	r3, r0, #1
 8000fba:	d102      	bne.n	8000fc2 <_read_r+0x1e>
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	b103      	cbz	r3, 8000fc2 <_read_r+0x1e>
 8000fc0:	602b      	str	r3, [r5, #0]
 8000fc2:	bd38      	pop	{r3, r4, r5, pc}
 8000fc4:	200000b0 	.word	0x200000b0

08000fc8 <_init>:
 8000fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fca:	bf00      	nop
 8000fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fce:	bc08      	pop	{r3}
 8000fd0:	469e      	mov	lr, r3
 8000fd2:	4770      	bx	lr

08000fd4 <_fini>:
 8000fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fd6:	bf00      	nop
 8000fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fda:	bc08      	pop	{r3}
 8000fdc:	469e      	mov	lr, r3
 8000fde:	4770      	bx	lr
